
Minigamne1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ac  080055ac  000076f8  2**0
                  CONTENTS
  4 .ARM          00000000  080055ac  080055ac  000076f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055ac  080055ac  000076f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ac  080055ac  000065ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055b0  080055b0  000065b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006f8  20000000  080055b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000076f8  2**0
                  CONTENTS
 10 .bss          00000594  200006f8  200006f8  000076f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c8c  20000c8c  000076f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013df5  00000000  00000000  00007728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db7  00000000  00000000  0001b51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  0001e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5d  00000000  00000000  0001f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb17  00000000  00000000  000203cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169e0  00000000  00000000  0003eee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b91d6  00000000  00000000  000558c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ea9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000510c  00000000  00000000  0010eae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00113bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200006f8 	.word	0x200006f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005358 	.word	0x08005358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006fc 	.word	0x200006fc
 80001c4:	08005358 	.word	0x08005358

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <create_mask>:





 uint32_t create_mask(uint8_t start, uint8_t end) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	460a      	mov	r2, r1
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	4613      	mov	r3, r2
 8000266:	71bb      	strb	r3, [r7, #6]

 	//Bitwise-logic trick to get 1's mask between start and end index

 	return ((1 << (end + 1)) - 1) ^ ((1 << start) - 1);                      // XOR to get the range
 8000268:	79bb      	ldrb	r3, [r7, #6]
 800026a:	3301      	adds	r3, #1
 800026c:	2201      	movs	r2, #1
 800026e:	fa02 f303 	lsl.w	r3, r2, r3
 8000272:	1e5a      	subs	r2, r3, #1
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	2101      	movs	r1, #1
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	3b01      	subs	r3, #1
 800027e:	4053      	eors	r3, r2

 }
 8000280:	4618      	mov	r0, r3
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <init_port>:





 GPIO *init_port(port_name_link name, port_mode mode, uint8_t pin_lower, uint8_t pin_upper){
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b08b      	sub	sp, #44	@ 0x2c
 8000290:	af00      	add	r7, sp, #0
 8000292:	4604      	mov	r4, r0
 8000294:	4608      	mov	r0, r1
 8000296:	4611      	mov	r1, r2
 8000298:	461a      	mov	r2, r3
 800029a:	4623      	mov	r3, r4
 800029c:	71fb      	strb	r3, [r7, #7]
 800029e:	4603      	mov	r3, r0
 80002a0:	71bb      	strb	r3, [r7, #6]
 80002a2:	460b      	mov	r3, r1
 80002a4:	717b      	strb	r3, [r7, #5]
 80002a6:	4613      	mov	r3, r2
 80002a8:	713b      	strb	r3, [r7, #4]



 	GPIO *port_pt = malloc(sizeof(GPIO)); //Pointer to Port
 80002aa:	200c      	movs	r0, #12
 80002ac:	f004 ff5a 	bl	8005164 <malloc>
 80002b0:	4603      	mov	r3, r0
 80002b2:	61fb      	str	r3, [r7, #28]



 	port_pt->PORT_IND = name;
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	701a      	strb	r2, [r3, #0]

 	port_pt->PORT_ADR = adr_link[name];
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	4a6a      	ldr	r2, [pc, #424]	@ (8000468 <init_port+0x1dc>)
 80002be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c2:	461a      	mov	r2, r3
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	605a      	str	r2, [r3, #4]

 	port_pt->MODE = mode;
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	721a      	strb	r2, [r3, #8]

 	port_pt->PIN_LOWER = pin_lower;
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	797a      	ldrb	r2, [r7, #5]
 80002d2:	725a      	strb	r2, [r3, #9]

 	port_pt->PIN_UPPER = pin_upper;
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	793a      	ldrb	r2, [r7, #4]
 80002d8:	729a      	strb	r2, [r3, #10]



 	//Enable clock for portX

 	uint32_t clock_en_mask = clock_mask_link[name];
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a63      	ldr	r2, [pc, #396]	@ (800046c <init_port+0x1e0>)
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	61bb      	str	r3, [r7, #24]

 	RCC->AHBENR |= clock_en_mask;
 80002e4:	4b62      	ldr	r3, [pc, #392]	@ (8000470 <init_port+0x1e4>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4961      	ldr	r1, [pc, #388]	@ (8000470 <init_port+0x1e4>)
 80002ea:	69bb      	ldr	r3, [r7, #24]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]





 	uint32_t *port_mode_reg = ((uint32_t *) &(port_pt->PORT_ADR->MODER));
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	617b      	str	r3, [r7, #20]



 	//First mask away the selected section (pin_range)

 	uint32_t temp_mask = create_mask(pin_lower*2, pin_upper*2 + 1);
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	793b      	ldrb	r3, [r7, #4]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	3301      	adds	r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	4610      	mov	r0, r2
 800030a:	f7ff ffa5 	bl	8000258 <create_mask>
 800030e:	6278      	str	r0, [r7, #36]	@ 0x24



 	//Sets the pin_range section to 0

 	*port_mode_reg &= ~temp_mask;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000316:	43db      	mvns	r3, r3
 8000318:	401a      	ands	r2, r3
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	601a      	str	r2, [r3, #0]

 	//Input-mode is enabled when each pin is 0b00 so no more masking is required



 	if (mode == OUTPUT){
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d123      	bne.n	800036c <init_port+0xe0>



 		//Similar idea to clear-mask, except shifting by 2 each time (0b01010101...)

 		uint32_t first_mask = (1 << pin_lower*2);
 8000324:	797b      	ldrb	r3, [r7, #5]
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	2201      	movs	r2, #1
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	60fb      	str	r3, [r7, #12]



 		temp_mask = first_mask;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	627b      	str	r3, [r7, #36]	@ 0x24

 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 8000334:	797b      	ldrb	r3, [r7, #5]
 8000336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800033a:	e00b      	b.n	8000354 <init_port+0xc8>

 			temp_mask <<= 2;
 800033c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	627b      	str	r3, [r7, #36]	@ 0x24

 			temp_mask |= first_mask;
 8000342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	4313      	orrs	r3, r2
 8000348:	627b      	str	r3, [r7, #36]	@ 0x24
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 800034a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800034e:	3301      	adds	r3, #1
 8000350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000354:	793a      	ldrb	r2, [r7, #4]
 8000356:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800035a:	429a      	cmp	r2, r3
 800035c:	d2ee      	bcs.n	800033c <init_port+0xb0>

 		}



 		*port_mode_reg |=temp_mask;
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000364:	431a      	orrs	r2, r3
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	e077      	b.n	800045c <init_port+0x1d0>



 	} else if (mode == ANALOG){
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	2b02      	cmp	r3, #2
 8000370:	d174      	bne.n	800045c <init_port+0x1d0>

 		//All 1s for analog mode (conveniently same as clear-mask)



 		*port_mode_reg |= temp_mask;
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000378:	431a      	orrs	r2, r3
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	601a      	str	r2, [r3, #0]



 		// enable the clock for ADC1

		RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 800037e:	4b3c      	ldr	r3, [pc, #240]	@ (8000470 <init_port+0x1e4>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a3b      	ldr	r2, [pc, #236]	@ (8000470 <init_port+0x1e4>)
 8000384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000388:	6153      	str	r3, [r2, #20]



		// set to synchronise the ADC with the clock

		ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 800038a:	4b3a      	ldr	r3, [pc, #232]	@ (8000474 <init_port+0x1e8>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	4a39      	ldr	r2, [pc, #228]	@ (8000474 <init_port+0x1e8>)
 8000390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000394:	6093      	str	r3, [r2, #8]



		// ADEN must be = 0 for configuration (is the default)

		ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000396:	4b38      	ldr	r3, [pc, #224]	@ (8000478 <init_port+0x1ec>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a37      	ldr	r2, [pc, #220]	@ (8000478 <init_port+0x1ec>)
 800039c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80003a0:	6093      	str	r3, [r2, #8]

		ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 80003a2:	4b35      	ldr	r3, [pc, #212]	@ (8000478 <init_port+0x1ec>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4a34      	ldr	r2, [pc, #208]	@ (8000478 <init_port+0x1ec>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ac:	6093      	str	r3, [r2, #8]

		ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 80003ae:	4b32      	ldr	r3, [pc, #200]	@ (8000478 <init_port+0x1ec>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	4a31      	ldr	r2, [pc, #196]	@ (8000478 <init_port+0x1ec>)
 80003b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80003b8:	6093      	str	r3, [r2, #8]



		// calibrate the ADC (self calibration routine)

		ADC2->CR |= ADC_CR_ADCAL;
 80003ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000478 <init_port+0x1ec>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	4a2e      	ldr	r2, [pc, #184]	@ (8000478 <init_port+0x1ec>)
 80003c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80003c4:	6093      	str	r3, [r2, #8]

		while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 80003c6:	bf00      	nop
 80003c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000478 <init_port+0x1ec>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80003d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d4:	d0f8      	beq.n	80003c8 <init_port+0x13c>



		//Clear channel-sequence

		ADC2->SQR1 = 0;
 80003d6:	4b28      	ldr	r3, [pc, #160]	@ (8000478 <init_port+0x1ec>)
 80003d8:	2200      	movs	r2, #0
 80003da:	631a      	str	r2, [r3, #48]	@ 0x30

		//Add each pin/channel to the conversion-sequence

		uint8_t pin; //Index of pin to add in seq

		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 80003dc:	2300      	movs	r3, #0
 80003de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80003e2:	e018      	b.n	8000416 <init_port+0x18a>

			pin = pin_lower + i;
 80003e4:	797a      	ldrb	r2, [r7, #5]
 80003e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80003ea:	4413      	add	r3, r2
 80003ec:	74fb      	strb	r3, [r7, #19]

			ADC2->SQR1 |= (pin-3) << 6*i; // set the request for channel x
 80003ee:	4b22      	ldr	r3, [pc, #136]	@ (8000478 <init_port+0x1ec>)
 80003f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80003f2:	7cfb      	ldrb	r3, [r7, #19]
 80003f4:	1ed8      	subs	r0, r3, #3
 80003f6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80003fa:	4613      	mov	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	4413      	add	r3, r2
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	fa00 f303 	lsl.w	r3, r0, r3
 8000406:	4a1c      	ldr	r2, [pc, #112]	@ (8000478 <init_port+0x1ec>)
 8000408:	430b      	orrs	r3, r1
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 800040c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000410:	3301      	adds	r3, #1
 8000412:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000416:	793a      	ldrb	r2, [r7, #4]
 8000418:	797b      	ldrb	r3, [r7, #5]
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000420:	429a      	cmp	r2, r3
 8000422:	dadf      	bge.n	80003e4 <init_port+0x158>

		}



		ADC2->SQR1 |= (pin_upper-pin_lower) << ADC_SQR1_L_Pos; // set the number of channels to read (number of pins in range)
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <init_port+0x1ec>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000428:	7939      	ldrb	r1, [r7, #4]
 800042a:	797a      	ldrb	r2, [r7, #5]
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	4611      	mov	r1, r2
 8000430:	4a11      	ldr	r2, [pc, #68]	@ (8000478 <init_port+0x1ec>)
 8000432:	430b      	orrs	r3, r1
 8000434:	6313      	str	r3, [r2, #48]	@ 0x30



		// single shot mode

		ADC2->CFGR &= ~ADC_CFGR_CONT;
 8000436:	4b10      	ldr	r3, [pc, #64]	@ (8000478 <init_port+0x1ec>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	4a0f      	ldr	r2, [pc, #60]	@ (8000478 <init_port+0x1ec>)
 800043c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000440:	60d3      	str	r3, [r2, #12]



		// Enable the ADC

		ADC2->CR |= ADC_CR_ADEN;
 8000442:	4b0d      	ldr	r3, [pc, #52]	@ (8000478 <init_port+0x1ec>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	4a0c      	ldr	r2, [pc, #48]	@ (8000478 <init_port+0x1ec>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6093      	str	r3, [r2, #8]



		// Wait the ADC to be ready.

		while (!(ADC2->ISR & ADC_ISR_ADRDY));
 800044e:	bf00      	nop
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <init_port+0x1ec>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f9      	beq.n	8000450 <init_port+0x1c4>



 	//Port has been initialised!! - return the port-struct

 	return port_pt;
 800045c:	69fb      	ldr	r3, [r7, #28]

 }
 800045e:	4618      	mov	r0, r3
 8000460:	372c      	adds	r7, #44	@ 0x2c
 8000462:	46bd      	mov	sp, r7
 8000464:	bd90      	pop	{r4, r7, pc}
 8000466:	bf00      	nop
 8000468:	0800552c 	.word	0x0800552c
 800046c:	08005540 	.word	0x08005540
 8000470:	40021000 	.word	0x40021000
 8000474:	50000300 	.word	0x50000300
 8000478:	50000100 	.word	0x50000100

0800047c <write_pins>:



 //Write to pins on port (OUTPUT mode)

 void write_pins(GPIO *port_pt, uint16_t data){
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	807b      	strh	r3, [r7, #2]

 	//Shift data in position of lower-pin

 	data <<= port_pt->PIN_LOWER;
 8000488:	887b      	ldrh	r3, [r7, #2]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	7a52      	ldrb	r2, [r2, #9]
 800048e:	4093      	lsls	r3, r2
 8000490:	807b      	strh	r3, [r7, #2]



 	//Load pointer to ODR for clarity

 	uint16_t *odr_pt = &port_pt->PORT_ADR->ODR;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	3314      	adds	r3, #20
 8000498:	60fb      	str	r3, [r7, #12]



 	//Clear pin-bits from lower-upper

 	*odr_pt &= ~create_mask(port_pt->PIN_LOWER, port_pt->PIN_UPPER);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	7a5a      	ldrb	r2, [r3, #9]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7a9b      	ldrb	r3, [r3, #10]
 80004a2:	4619      	mov	r1, r3
 80004a4:	4610      	mov	r0, r2
 80004a6:	f7ff fed7 	bl	8000258 <create_mask>
 80004aa:	4603      	mov	r3, r0
 80004ac:	43d9      	mvns	r1, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	881a      	ldrh	r2, [r3, #0]
 80004b2:	b28b      	uxth	r3, r1
 80004b4:	4013      	ands	r3, r2
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	801a      	strh	r2, [r3, #0]

 	//Load data

 	*odr_pt |= data;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	881a      	ldrh	r2, [r3, #0]
 80004c0:	887b      	ldrh	r3, [r7, #2]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	801a      	strh	r2, [r3, #0]



 	return;
 80004ca:	bf00      	nop

 }
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <write_single_pin>:



 //Write a single bit of data - at specified index (OUTPUT mode)

 void write_single_pin(GPIO *port_pt, uint8_t single_bit, uint8_t pin_index){
 80004d2:	b480      	push	{r7}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
 80004da:	460b      	mov	r3, r1
 80004dc:	70fb      	strb	r3, [r7, #3]
 80004de:	4613      	mov	r3, r2
 80004e0:	70bb      	strb	r3, [r7, #2]

 	//Check if targeted-idnex is within range

 	if (pin_index < port_pt->PIN_LOWER || port_pt->PIN_UPPER < pin_index){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	7a5b      	ldrb	r3, [r3, #9]
 80004e6:	78ba      	ldrb	r2, [r7, #2]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d325      	bcc.n	8000538 <write_single_pin+0x66>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	7a9b      	ldrb	r3, [r3, #10]
 80004f0:	78ba      	ldrb	r2, [r7, #2]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d820      	bhi.n	8000538 <write_single_pin+0x66>



 	//Load pointer to ODR for clarity

 	uint16_t *odr_pt = &port_pt->PORT_ADR->ODR;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	3314      	adds	r3, #20
 80004fc:	60fb      	str	r3, [r7, #12]



 	//Clear bit at index

 	*odr_pt &= ~(1 << pin_index);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	b21a      	sxth	r2, r3
 8000504:	78bb      	ldrb	r3, [r7, #2]
 8000506:	2101      	movs	r1, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	b21b      	sxth	r3, r3
 800050e:	43db      	mvns	r3, r3
 8000510:	b21b      	sxth	r3, r3
 8000512:	4013      	ands	r3, r2
 8000514:	b21b      	sxth	r3, r3
 8000516:	b29a      	uxth	r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	801a      	strh	r2, [r3, #0]

 	//Write new-bit

 	*odr_pt  |= single_bit << pin_index;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	b21a      	sxth	r2, r3
 8000522:	78f9      	ldrb	r1, [r7, #3]
 8000524:	78bb      	ldrb	r3, [r7, #2]
 8000526:	fa01 f303 	lsl.w	r3, r1, r3
 800052a:	b21b      	sxth	r3, r3
 800052c:	4313      	orrs	r3, r2
 800052e:	b21b      	sxth	r3, r3
 8000530:	b29a      	uxth	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	801a      	strh	r2, [r3, #0]



 	return;
 8000536:	e000      	b.n	800053a <write_single_pin+0x68>
 		return;
 8000538:	bf00      	nop

 }
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <EXTI0_IRQHandler>:

 //Wish this wasn't necessary, but each handler function has to be defined seperately

 //Is there a better way to do this? There doesn't seem to be a generic IQRHandler..

 void EXTI0_IRQHandler(void) {EXTI->PR |= (1 << 0); if (EXTI_Callbacks[0]) EXTI_Callbacks[0]();}
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <EXTI0_IRQHandler+0x24>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <EXTI0_IRQHandler+0x24>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6153      	str	r3, [r2, #20]
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <EXTI0_IRQHandler+0x28>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <EXTI0_IRQHandler+0x1e>
 800055c:	4b03      	ldr	r3, [pc, #12]	@ (800056c <EXTI0_IRQHandler+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4798      	blx	r3
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010400 	.word	0x40010400
 800056c:	20000714 	.word	0x20000714

08000570 <EXTI1_IRQHandler>:

 void EXTI1_IRQHandler(void) {EXTI->PR |= (1 << 1); if (EXTI_Callbacks[1]) EXTI_Callbacks[1]();}
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <EXTI1_IRQHandler+0x24>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <EXTI1_IRQHandler+0x24>)
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	6153      	str	r3, [r2, #20]
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <EXTI1_IRQHandler+0x28>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <EXTI1_IRQHandler+0x1e>
 8000588:	4b03      	ldr	r3, [pc, #12]	@ (8000598 <EXTI1_IRQHandler+0x28>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	4798      	blx	r3
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010400 	.word	0x40010400
 8000598:	20000714 	.word	0x20000714

0800059c <EXTI3_IRQHandler>:

 void EXTI2_IRQHandler(void) {EXTI->PR |= (1 << 2); if (EXTI_Callbacks[2]) EXTI_Callbacks[2]();}

 void EXTI3_IRQHandler(void) {EXTI->PR |= (1 << 3); if (EXTI_Callbacks[3]) EXTI_Callbacks[3]();}
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <EXTI3_IRQHandler+0x24>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <EXTI3_IRQHandler+0x24>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6153      	str	r3, [r2, #20]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <EXTI3_IRQHandler+0x28>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <EXTI3_IRQHandler+0x1e>
 80005b4:	4b03      	ldr	r3, [pc, #12]	@ (80005c4 <EXTI3_IRQHandler+0x28>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4798      	blx	r3
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40010400 	.word	0x40010400
 80005c4:	20000714 	.word	0x20000714

080005c8 <EXTI4_IRQHandler>:

 void EXTI4_IRQHandler(void) {EXTI->PR |= (1 << 4); if (EXTI_Callbacks[4]) EXTI_Callbacks[4]();}
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <EXTI4_IRQHandler+0x24>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <EXTI4_IRQHandler+0x24>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6153      	str	r3, [r2, #20]
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <EXTI4_IRQHandler+0x28>)
 80005da:	691b      	ldr	r3, [r3, #16]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <EXTI4_IRQHandler+0x1e>
 80005e0:	4b03      	ldr	r3, [pc, #12]	@ (80005f0 <EXTI4_IRQHandler+0x28>)
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	4798      	blx	r3
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40010400 	.word	0x40010400
 80005f0:	20000714 	.word	0x20000714

080005f4 <EXTI9_5_IRQHandler>:

 //Must find which pin in 5-9 range triggered handler

 void EXTI9_5_IRQHandler(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

	 //HAL_Delay(100);


     for (uint8_t i = 5; i <= 9; i++) {
 80005fa:	2305      	movs	r3, #5
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e020      	b.n	8000642 <EXTI9_5_IRQHandler+0x4e>

         if (EXTI->PR & (1 << i)) {
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <EXTI9_5_IRQHandler+0x60>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	79fa      	ldrb	r2, [r7, #7]
 8000606:	2101      	movs	r1, #1
 8000608:	fa01 f202 	lsl.w	r2, r1, r2
 800060c:	4013      	ands	r3, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	d014      	beq.n	800063c <EXTI9_5_IRQHandler+0x48>

             EXTI->PR |= (1 << i);  // Clear pending flag
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <EXTI9_5_IRQHandler+0x60>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	79fa      	ldrb	r2, [r7, #7]
 8000618:	2101      	movs	r1, #1
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	4611      	mov	r1, r2
 8000620:	4a0c      	ldr	r2, [pc, #48]	@ (8000654 <EXTI9_5_IRQHandler+0x60>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6153      	str	r3, [r2, #20]

             if (EXTI_Callbacks[i]) EXTI_Callbacks[i]();  // Call user-defined function
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <EXTI9_5_IRQHandler+0x64>)
 800062a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <EXTI9_5_IRQHandler+0x48>
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <EXTI9_5_IRQHandler+0x64>)
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	4798      	blx	r3
     for (uint8_t i = 5; i <= 9; i++) {
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	3301      	adds	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b09      	cmp	r3, #9
 8000646:	d9db      	bls.n	8000600 <EXTI9_5_IRQHandler+0xc>

         }

     }

 }
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010400 	.word	0x40010400
 8000658:	20000714 	.word	0x20000714

0800065c <EXTI15_10_IRQHandler>:



 void EXTI15_10_IRQHandler(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

	// HAL_Delay(100);

     for (uint8_t i = 10; i <= 15; i++) {
 8000662:	230a      	movs	r3, #10
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e020      	b.n	80006aa <EXTI15_10_IRQHandler+0x4e>

         if (EXTI->PR & (1 << i)) {
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <EXTI15_10_IRQHandler+0x60>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	79fa      	ldrb	r2, [r7, #7]
 800066e:	2101      	movs	r1, #1
 8000670:	fa01 f202 	lsl.w	r2, r1, r2
 8000674:	4013      	ands	r3, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	d014      	beq.n	80006a4 <EXTI15_10_IRQHandler+0x48>

             EXTI->PR |= (1 << i);  // Clear pending flag
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <EXTI15_10_IRQHandler+0x60>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	2101      	movs	r1, #1
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <EXTI15_10_IRQHandler+0x60>)
 800068a:	430b      	orrs	r3, r1
 800068c:	6153      	str	r3, [r2, #20]

             if (EXTI_Callbacks[i]) EXTI_Callbacks[i]();  // Call user-defined function
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <EXTI15_10_IRQHandler+0x64>)
 8000692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d004      	beq.n	80006a4 <EXTI15_10_IRQHandler+0x48>
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <EXTI15_10_IRQHandler+0x64>)
 800069e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a2:	4798      	blx	r3
     for (uint8_t i = 10; i <= 15; i++) {
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	3301      	adds	r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d9db      	bls.n	8000668 <EXTI15_10_IRQHandler+0xc>

         }

     }

 }
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010400 	.word	0x40010400
 80006c0:	20000714 	.word	0x20000714

080006c4 <enable_interupt>:

 void enable_interupt(GPIO *port_pt, uint8_t pin_index,

 					trigger_type trigger, uint8_t priority,

 					void (*interupt_handler)(void)){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	4608      	mov	r0, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	4603      	mov	r3, r0
 80006d4:	70fb      	strb	r3, [r7, #3]
 80006d6:	460b      	mov	r3, r1
 80006d8:	70bb      	strb	r3, [r7, #2]
 80006da:	4613      	mov	r3, r2
 80006dc:	707b      	strb	r3, [r7, #1]



	 //Link interupt_handler function to appropriate EXTI_Callback
	  	EXTI_Callbacks[pin_index] = interupt_handler;
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	493b      	ldr	r1, [pc, #236]	@ (80007d0 <enable_interupt+0x10c>)
 80006e2:	69ba      	ldr	r2, [r7, #24]
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
	  	// Disable the interrupts while messing around with the settings
	  	//  otherwise can lead to strange behaviour
	  	__disable_irq();

	  	// Enable the system configuration controller (SYSCFG in RCC)
	  	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80006ec:	4b39      	ldr	r3, [pc, #228]	@ (80007d4 <enable_interupt+0x110>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a38      	ldr	r2, [pc, #224]	@ (80007d4 <enable_interupt+0x110>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6193      	str	r3, [r2, #24]

	  	//Tell pin-0 multiplexer to target selected-port (PORT_IND)

	  	//If pin 0-3 or 12-15 :

	  	uint32_t exticr_shift = 4 * (pin_index % 4);
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	f003 0303 	and.w	r3, r3, #3
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
	  	SYSCFG->EXTICR[pin_index / 4] &= ~(0xF << exticr_shift); // clear old bits
 8000702:	4a35      	ldr	r2, [pc, #212]	@ (80007d8 <enable_interupt+0x114>)
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	089b      	lsrs	r3, r3, #2
 8000708:	b2d8      	uxtb	r0, r3
 800070a:	4603      	mov	r3, r0
 800070c:	3302      	adds	r3, #2
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	210f      	movs	r1, #15
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	43d2      	mvns	r2, r2
 800071c:	492e      	ldr	r1, [pc, #184]	@ (80007d8 <enable_interupt+0x114>)
 800071e:	401a      	ands	r2, r3
 8000720:	1c83      	adds	r3, r0, #2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	SYSCFG->EXTICR[pin_index / 4] |= (port_pt->PORT_IND << exticr_shift); // set new bits
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <enable_interupt+0x114>)
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	b2d8      	uxtb	r0, r3
 800072e:	4603      	mov	r3, r0
 8000730:	3302      	adds	r3, #2
 8000732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	7812      	ldrb	r2, [r2, #0]
 800073a:	4611      	mov	r1, r2
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	4925      	ldr	r1, [pc, #148]	@ (80007d8 <enable_interupt+0x114>)
 8000744:	431a      	orrs	r2, r3
 8000746:	1c83      	adds	r3, r0, #2
 8000748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  	//  Select interrupt on rising/falling edge (pins are consecutive bits)
	  	if (trigger==RISING_EDGE){
 800074c:	78bb      	ldrb	r3, [r7, #2]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10a      	bne.n	8000768 <enable_interupt+0xa4>
	  		//Set rising-edge
	  		EXTI->RTSR |= (1 << pin_index);
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <enable_interupt+0x118>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	78fa      	ldrb	r2, [r7, #3]
 8000758:	2101      	movs	r1, #1
 800075a:	fa01 f202 	lsl.w	r2, r1, r2
 800075e:	4611      	mov	r1, r2
 8000760:	4a1e      	ldr	r2, [pc, #120]	@ (80007dc <enable_interupt+0x118>)
 8000762:	430b      	orrs	r3, r1
 8000764:	6093      	str	r3, [r2, #8]
 8000766:	e009      	b.n	800077c <enable_interupt+0xb8>
	  	} else{
	  		//Set falling-edge
	  		EXTI->FTSR |= (1 << pin_index);
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <enable_interupt+0x118>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	78fa      	ldrb	r2, [r7, #3]
 800076e:	2101      	movs	r1, #1
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <enable_interupt+0x118>)
 8000778:	430b      	orrs	r3, r1
 800077a:	60d3      	str	r3, [r2, #12]
	  	}


	  	// set the interrupt from EXTI line x as 'not masked' - as in, enable it.
	  	EXTI->IMR |= (1 << pin_index);
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <enable_interupt+0x118>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	78fa      	ldrb	r2, [r7, #3]
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <enable_interupt+0x118>)
 800078c:	430b      	orrs	r3, r1
 800078e:	6013      	str	r3, [r2, #0]

	  	// Tell the NVIC module that EXTIx interrupts should be handled

	  	//Pins 0-4 have a seperate request-num (from 6-10),
	  	//pins 5-9 are all at 23, and pins 10-15 are at 40
	  	uint8_t req_num = (pin_index <= 4) ? (6 + pin_index) :
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b04      	cmp	r3, #4
 8000794:	d803      	bhi.n	800079e <enable_interupt+0xda>
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	3306      	adds	r3, #6
 800079a:	b2db      	uxtb	r3, r3
 800079c:	e005      	b.n	80007aa <enable_interupt+0xe6>
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2b09      	cmp	r3, #9
 80007a2:	d801      	bhi.n	80007a8 <enable_interupt+0xe4>
 80007a4:	2317      	movs	r3, #23
 80007a6:	e000      	b.n	80007aa <enable_interupt+0xe6>
 80007a8:	2328      	movs	r3, #40	@ 0x28
 80007aa:	72fb      	strb	r3, [r7, #11]
	  					  (pin_index <= 9) ? 23 : 40;

	  	NVIC_SetPriority(req_num, priority);  // Set Priority
 80007ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007b0:	787a      	ldrb	r2, [r7, #1]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd25 	bl	8000204 <__NVIC_SetPriority>
	  	NVIC_EnableIRQ(req_num);
 80007ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd02 	bl	80001c8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80007c4:	b662      	cpsie	i
}
 80007c6:	bf00      	nop

	  	// Re-enable all interrupts (now that we are finished)
	  	__enable_irq();
 }
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000714 	.word	0x20000714
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000
 80007dc:	40010400 	.word	0x40010400

080007e0 <matrixInit>:
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//Initialise Dot Matrix display
void matrixInit (void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	max7219_write(0x09, 0); //disbale decoding mode
 80007e4:	2100      	movs	r1, #0
 80007e6:	2009      	movs	r0, #9
 80007e8:	f000 f904 	bl	80009f4 <max7219_write>
	max7219_write(0x0a, 0x01); //3.32 for intensity
 80007ec:	2101      	movs	r1, #1
 80007ee:	200a      	movs	r0, #10
 80007f0:	f000 f900 	bl	80009f4 <max7219_write>
	max7219_write(0x0B, 0x07); // scan all 7 columbs
 80007f4:	2107      	movs	r1, #7
 80007f6:	200b      	movs	r0, #11
 80007f8:	f000 f8fc 	bl	80009f4 <max7219_write>
	max7219_write(0x0C, 0x01);// normal opperation (i think this is shutdown mode
 80007fc:	2101      	movs	r1, #1
 80007fe:	200c      	movs	r0, #12
 8000800:	f000 f8f8 	bl	80009f4 <max7219_write>
	max7219_write(0x0F, 00); //disable the display test
 8000804:	2100      	movs	r1, #0
 8000806:	200f      	movs	r0, #15
 8000808:	f000 f8f4 	bl	80009f4 <max7219_write>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <pattern1>:

//creates patterns of 5 to progress through
void pattern1 ()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	for (int i=0; i <=8; i++)
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	e00a      	b.n	8000832 <pattern1+0x22>
	  		  	{
	  		  	 max7219_write(i, data[i-1]);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <pattern1+0x34>)
 8000822:	5cd3      	ldrb	r3, [r2, r3]
 8000824:	4619      	mov	r1, r3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f8e4 	bl	80009f4 <max7219_write>
	for (int i=0; i <=8; i++)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b08      	cmp	r3, #8
 8000836:	ddf1      	ble.n	800081c <pattern1+0xc>
	  		  	}
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	08005554 	.word	0x08005554

08000848 <pattern2>:

void pattern2 ()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
	for (int i=0; i <=8; i++)
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e00a      	b.n	800086a <pattern2+0x22>
	  		  	{
	  		  	 max7219_write(i, data2[i-1]);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a08      	ldr	r2, [pc, #32]	@ (800087c <pattern2+0x34>)
 800085a:	5cd3      	ldrb	r3, [r2, r3]
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f8c8 	bl	80009f4 <max7219_write>
	for (int i=0; i <=8; i++)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b08      	cmp	r3, #8
 800086e:	ddf1      	ble.n	8000854 <pattern2+0xc>
	  		  	}
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	0800555c 	.word	0x0800555c

08000880 <pattern3>:

void pattern3 ()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	for (int i=0; i <=8; i++)
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	e00a      	b.n	80008a2 <pattern3+0x22>
	  		  	{
	  		  	 max7219_write(i, data3[i-1]);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <pattern3+0x34>)
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	4619      	mov	r1, r3
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f8ac 	bl	80009f4 <max7219_write>
	for (int i=0; i <=8; i++)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3301      	adds	r3, #1
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	ddf1      	ble.n	800088c <pattern3+0xc>
	  		  	}
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	08005564 	.word	0x08005564

080008b8 <empty_matrix>:

void empty_matrix()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	for (int i=0; i <=8; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	e00a      	b.n	80008da <empty_matrix+0x22>
		  		  	{
		  		  	 max7219_write(i, empty[i-1]);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <empty_matrix+0x34>)
 80008ca:	5cd3      	ldrb	r3, [r2, r3]
 80008cc:	4619      	mov	r1, r3
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f890 	bl	80009f4 <max7219_write>
	for (int i=0; i <=8; i++)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b08      	cmp	r3, #8
 80008de:	ddf1      	ble.n	80008c4 <empty_matrix+0xc>
		  		  	}
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	0800556c 	.word	0x0800556c

080008f0 <__NVIC_EnableIRQ>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0b      	blt.n	800091a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	@ (8000928 <__NVIC_EnableIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	@ (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	@ (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <TIM3_Init>:
#include "delay.h"

volatile uint8_t delay_done = 0;

void TIM3_Init(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000984:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <TIM3_Init+0x34>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <TIM3_Init+0x34>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	61d3      	str	r3, [r2, #28]

    TIM3->PSC = 71999 - 1;  // 10kHz
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <TIM3_Init+0x38>)
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <TIM3_Init+0x3c>)
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
    // TIM3->ARR = 1000 - 1; // 1 second delay (10000 counts of 0.1ms = 1s)

    TIM3->DIER |= TIM_DIER_UIE;  // Enable update interrupt
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <TIM3_Init+0x38>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <TIM3_Init+0x38>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM3_IRQn, 1);
 80009a2:	2101      	movs	r1, #1
 80009a4:	201d      	movs	r0, #29
 80009a6:	f7ff ffc1 	bl	800092c <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 80009aa:	201d      	movs	r0, #29
 80009ac:	f7ff ffa0 	bl	80008f0 <__NVIC_EnableIRQ>

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40000400 	.word	0x40000400
 80009bc:	0001193e 	.word	0x0001193e

080009c0 <TIM3_IRQHandler>:
    TIM3->CNT = 0;
    TIM3->SR &= ~TIM_SR_UIF;
    TIM3->CR1 |= TIM_CR1_CEN;   // Start timer
}

void TIM3_IRQHandler(void) {
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN;  // Stop timer
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <TIM3_IRQHandler+0x2c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <TIM3_IRQHandler+0x2c>)
 80009ca:	f023 0301 	bic.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]

	delay_done = 1;  // Mark delay done
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <TIM3_IRQHandler+0x30>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]

	TIM3->SR &= ~TIM_SR_UIF;  // Clear flag
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <TIM3_IRQHandler+0x2c>)
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <TIM3_IRQHandler+0x2c>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	6113      	str	r3, [r2, #16]

}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40000400 	.word	0x40000400
 80009f0:	20000754 	.word	0x20000754

080009f4 <max7219_write>:
void reset_game();

GPIO *led_pins;

void max7219_write (uint8_t Addr, uint8_t data)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
	uint16_t write_data = (Addr<<8)|data; // merge our address and data into one variable with adress on the 8-RHS and data on the 8-LHS as per the datasheet
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // pull the pin low to enable slave device
 8000a16:	2200      	movs	r2, #0
 8000a18:	2110      	movs	r1, #16
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f001 f94d 	bl	8001cbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&write_data, 1, 100);
 8000a22:	f107 010e 	add.w	r1, r7, #14
 8000a26:	2364      	movs	r3, #100	@ 0x64
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <max7219_write+0x50>)
 8000a2c:	f002 ffc1 	bl	80039b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull pin high to disable slave
 8000a30:	2201      	movs	r2, #1
 8000a32:	2110      	movs	r1, #16
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a38:	f001 f940 	bl	8001cbc <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200007ac 	.word	0x200007ac

08000a48 <pres_frequency>:


int pres_frequency (int frequency)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if (frequency ==0) return 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <pres_frequency+0x12>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e007      	b.n	8000a6a <pres_frequency+0x22>
	return (TIM_FREQ /(1000*frequency));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <pres_frequency+0x30>)
 8000a66:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	01c9c380 	.word	0x01c9c380

08000a7c <notone>:

void notone (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_PRESCALER(&htim1, TIM_CHANNEL_1);
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <notone+0x18>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000810 	.word	0x20000810

08000a98 <play_tone>:


void play_tone (int *tone, int *duration, int *pause, int size)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i <size; i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	e030      	b.n	8000b0e <play_tone+0x76>
	{
		int pres = pres_frequency(tone[i]); // Calculate the prescaler value to generate the desired frequency
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffc6 	bl	8000a48 <pres_frequency>
 8000abc:	6178      	str	r0, [r7, #20]
		int dur = duration[i];  // Duration to play the current tone
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	613b      	str	r3, [r7, #16]
		int pausebetweentones = 0; // Calculate the pause between tones (if provided)
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
		if (pause != NULL) pausebetweentones = pause[i] - duration[i];  // Set the PWM prescaler to produce the required frequency
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00b      	beq.n	8000aec <play_tone+0x54>
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	440b      	add	r3, r1
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	61bb      	str	r3, [r7, #24]
		__HAL_TIM_SET_PRESCALER(&htim1, pres);
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <play_tone+0x88>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(dur); //delay by the duration of the note
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fe5c 	bl	80017b4 <HAL_Delay>
		notone();
 8000afc:	f7ff ffbe 	bl	8000a7c <notone>
		HAL_Delay(pausebetweentones); // Delay for the pause duration before playing the next tone
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fe56 	bl	80017b4 <HAL_Delay>
	for (int i = 0; i <size; i++)
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbca      	blt.n	8000aac <play_tone+0x14>

	}
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000810 	.word	0x20000810

08000b24 <reset_game>:

void reset_game(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	empty_matrix(); // set all lights to off
 8000b28:	f7ff fec6 	bl	80008b8 <empty_matrix>
    state_counter = 1;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <reset_game+0x1c>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
    SerialOutputString((uint8_t *)"Grrr, you got the answer wrong! What be a pirates favourite letter? (A: R, B: C) \n", &USART1_PORT);
 8000b32:	4904      	ldr	r1, [pc, #16]	@ (8000b44 <reset_game+0x20>)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <reset_game+0x24>)
 8000b36:	f000 fbca 	bl	80012ce <SerialOutputString>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004
 8000b48:	08005370 	.word	0x08005370

08000b4c <second_button>:


void second_button() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	//if (song_is_playing) return;  // Ignore input during song playback
	if (state_counter == 1) {
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <second_button+0x54>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d10c      	bne.n	8000b74 <second_button+0x28>
	            pattern1(); //light first LED pattter
 8000b5a:	f7ff fe59 	bl	8000810 <pattern1>
	            play_song_2 = 1; //play Pirates of the carribean song
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <second_button+0x58>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
	            state_counter = 2; //increase counter for next level
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <second_button+0x54>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	701a      	strb	r2, [r3, #0]
	            SerialOutputString((uint8_t *)"Ive got no legs, yet roam the shore, I’ve seen more gold than most ever store. I squawk secrets of ships and sails, And wear bright colors instead of mail. What be I? (A: Flag, B: Parrot) \n", &USART1_PORT); //print message for next game
 8000b6a:	490f      	ldr	r1, [pc, #60]	@ (8000ba8 <second_button+0x5c>)
 8000b6c:	480f      	ldr	r0, [pc, #60]	@ (8000bac <second_button+0x60>)
 8000b6e:	f000 fbae 	bl	80012ce <SerialOutputString>
	 else
	        {
	            reset_game();  // Wrong button for this stage
	        }

}
 8000b72:	e013      	b.n	8000b9c <second_button+0x50>
	else if (state_counter == 2) {
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <second_button+0x54>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d10c      	bne.n	8000b98 <second_button+0x4c>
	            pattern2(); //Light pattern 2 on matrix
 8000b7e:	f7ff fe63 	bl	8000848 <pattern2>
	            play_song_2 = 1; //play song
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <second_button+0x58>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
	            state_counter = 3; //increase counter for final game
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <second_button+0x54>)
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	701a      	strb	r2, [r3, #0]
	            SerialOutputString((uint8_t *)"Pirate’s life for me, I’m the captain’s steady hand, what am I? (A: First mate, B: Pirate Ship) \n", &USART1_PORT); //print message for final game
 8000b8e:	4906      	ldr	r1, [pc, #24]	@ (8000ba8 <second_button+0x5c>)
 8000b90:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <second_button+0x64>)
 8000b92:	f000 fb9c 	bl	80012ce <SerialOutputString>
}
 8000b96:	e001      	b.n	8000b9c <second_button+0x50>
	            reset_game();  // Wrong button for this stage
 8000b98:	f7ff ffc4 	bl	8000b24 <reset_game>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000b34 	.word	0x20000b34
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	080053c4 	.word	0x080053c4
 8000bb0:	08005484 	.word	0x08005484

08000bb4 <first_button>:

void first_button() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
		if (state_counter == 3) {
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <first_button+0x2c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d109      	bne.n	8000bd6 <first_button+0x22>
			            pattern3(); //light final LED pattern
 8000bc2:	f7ff fe5d 	bl	8000880 <pattern3>
			            SerialOutputString((uint8_t *)"You Win\n", &USART1_PORT);
 8000bc6:	4907      	ldr	r1, [pc, #28]	@ (8000be4 <first_button+0x30>)
 8000bc8:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <first_button+0x34>)
 8000bca:	f000 fb80 	bl	80012ce <SerialOutputString>
			            play_song_3 = 1; //run song
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <first_button+0x38>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
			        }
	else
	{
	            reset_game();  // Wrong button for this stage
	 }
}
 8000bd4:	e001      	b.n	8000bda <first_button+0x26>
	            reset_game();  // Wrong button for this stage
 8000bd6:	f7ff ffa5 	bl	8000b24 <reset_game>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000004 	.word	0x20000004
 8000be8:	080054ec 	.word	0x080054ec
 8000bec:	20000b38 	.word	0x20000b38

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 fd77 	bl	80016e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f88f 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fa3f 	bl	8001080 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c02:	f000 f8ef 	bl	8000de4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c06:	f000 f92d 	bl	8000e64 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000c0a:	f000 fa17 	bl	800103c <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000c0e:	f000 f967 	bl	8000ee0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TIM3_Init();
 8000c12:	f7ff feb5 	bl	8000980 <TIM3_Init>
  matrixInit(); //Initialise the board
 8000c16:	f7ff fde3 	bl	80007e0 <matrixInit>
  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4933      	ldr	r1, [pc, #204]	@ (8000cec <main+0xfc>)
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f000 fac8 	bl	80011b4 <SerialInitialise>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Initiate the PWM sequence
 8000c24:	2100      	movs	r1, #0
 8000c26:	4832      	ldr	r0, [pc, #200]	@ (8000cf0 <main+0x100>)
 8000c28:	f003 fa54 	bl	80040d4 <HAL_TIM_PWM_Start>


  led_pins = init_port(E, OUTPUT, 8, 15);
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	2208      	movs	r2, #8
 8000c30:	2101      	movs	r1, #1
 8000c32:	2004      	movs	r0, #4
 8000c34:	f7ff fb2a 	bl	800028c <init_port>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf4 <main+0x104>)
 8000c3c:	6013      	str	r3, [r2, #0]
      uint8_t pin_state = 0b00000001;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
      write_pins(led_pins, pin_state);
 8000c42:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf4 <main+0x104>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fc15 	bl	800047c <write_pins>
      write_single_pin(led_pins, 1, 11); // PE11 on
 8000c52:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <main+0x104>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	220b      	movs	r2, #11
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fc39 	bl	80004d2 <write_single_pin>
      write_single_pin(led_pins, 0, 8);  // PE8 off
 8000c60:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <main+0x104>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2208      	movs	r2, #8
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc32 	bl	80004d2 <write_single_pin>

      // Initialize button (PA0 as input)
      GPIO *button = init_port(A, INPUT, 0, 0); //set PA0 to input
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fb09 	bl	800028c <init_port>
 8000c7a:	60b8      	str	r0, [r7, #8]
      GPIO *button2 = init_port(B, INPUT, 1, 1); //Set PB1 to input
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2100      	movs	r1, #0
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fb02 	bl	800028c <init_port>
 8000c88:	6078      	str	r0, [r7, #4]
      enable_interupt(button, 0, RISING_EDGE, 1, &first_button); //enable interrupt for button 1
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <main+0x108>)
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	68b8      	ldr	r0, [r7, #8]
 8000c96:	f7ff fd15 	bl	80006c4 <enable_interupt>
      enable_interupt(button2, 1, RISING_EDGE, 1, &second_button); //enable interrupt for button 2
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <main+0x10c>)
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fd0d 	bl	80006c4 <enable_interupt>

      SerialOutputString((uint8_t*)"What be a pirates favourite letter? (A: R, B: C) \n", &USART1_PORT);
 8000caa:	4910      	ldr	r1, [pc, #64]	@ (8000cec <main+0xfc>)
 8000cac:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <main+0x110>)
 8000cae:	f000 fb0e 	bl	80012ce <SerialOutputString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (play_song_2) {
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <main+0x114>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d009      	beq.n	8000cce <main+0xde>
	         play_tone(notes, durations, NULL, song_length_third); //play a third of the song
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <main+0x118>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4912      	ldr	r1, [pc, #72]	@ (8000d0c <main+0x11c>)
 8000cc2:	4813      	ldr	r0, [pc, #76]	@ (8000d10 <main+0x120>)
 8000cc4:	f7ff fee8 	bl	8000a98 <play_tone>
	         play_song_2 = 0;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <main+0x114>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
	     }

	     if (play_song_3) {
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <main+0x124>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0ed      	beq.n	8000cb2 <main+0xc2>
	         play_tone(notes, durations, NULL, song_length); // play the enitre song
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <main+0x128>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	490b      	ldr	r1, [pc, #44]	@ (8000d0c <main+0x11c>)
 8000cde:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <main+0x120>)
 8000ce0:	f7ff feda 	bl	8000a98 <play_tone>
	         play_song_2 = 0;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <main+0x114>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
	  if (play_song_2) {
 8000cea:	e7e2      	b.n	8000cb2 <main+0xc2>
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000810 	.word	0x20000810
 8000cf4:	20000b30 	.word	0x20000b30
 8000cf8:	08000bb5 	.word	0x08000bb5
 8000cfc:	08000b4d 	.word	0x08000b4d
 8000d00:	080054f8 	.word	0x080054f8
 8000d04:	20000b34 	.word	0x20000b34
 8000d08:	08005578 	.word	0x08005578
 8000d0c:	20000370 	.word	0x20000370
 8000d10:	20000044 	.word	0x20000044
 8000d14:	20000b38 	.word	0x20000b38
 8000d18:	08005574 	.word	0x08005574

08000d1c <SystemClock_Config>:
  * @retval None
  */


void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09e      	sub	sp, #120	@ 0x78
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d26:	2228      	movs	r2, #40	@ 0x28
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 fad0 	bl	80052d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	223c      	movs	r2, #60	@ 0x3c
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fac2 	bl	80052d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d54:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d6a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d70:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d72:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f9b2 	bl	80020e0 <HAL_RCC_OscConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d82:	f000 fa11 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	230f      	movs	r3, #15
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000da0:	2101      	movs	r1, #1
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 f9da 	bl	800315c <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dae:	f000 f9fb 	bl	80011a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <SystemClock_Config+0xc4>)
 8000db4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000dba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fb98 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000dd2:	f000 f9e9 	bl	80011a8 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3778      	adds	r7, #120	@ 0x78
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	00021020 	.word	0x00021020

08000de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <MX_I2C1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000df0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <MX_I2C1_Init+0x7c>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df4:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e20:	f000 ff64 	bl	8001cec <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2a:	f000 f9bd 	bl	80011a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e32:	f000 fff6 	bl	8001e22 <HAL_I2CEx_ConfigAnalogFilter>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f9b4 	bl	80011a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e44:	f001 f838 	bl	8001eb8 <HAL_I2CEx_ConfigDigitalFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f9ab 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000758 	.word	0x20000758
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	00201d2b 	.word	0x00201d2b

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000edc <MX_SPI1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e78:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e80:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000e84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_SPI1_Init+0x74>)
 8000ec6:	f002 fcc9 	bl	800385c <HAL_SPI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 f96a 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200007ac 	.word	0x200007ac
 8000edc:	40013000 	.word	0x40013000

08000ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b09a      	sub	sp, #104	@ 0x68
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	222c      	movs	r2, #44	@ 0x2c
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f9d8 	bl	80052d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f20:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f22:	4a45      	ldr	r2, [pc, #276]	@ (8001038 <MX_TIM1_Init+0x158>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f26:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b41      	ldr	r3, [pc, #260]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000f32:	4b40      	ldr	r3, [pc, #256]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f40:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f4c:	4839      	ldr	r0, [pc, #228]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f4e:	f003 f809 	bl	8003f64 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f58:	f000 f926 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f60:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f66:	4619      	mov	r1, r3
 8000f68:	4832      	ldr	r0, [pc, #200]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f6a:	f003 fac7 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f74:	f000 f918 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f78:	482e      	ldr	r0, [pc, #184]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f7a:	f003 f84a 	bl	8004012 <HAL_TIM_PWM_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f84:	f000 f910 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4826      	ldr	r0, [pc, #152]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000f9c:	f003 ffaa 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fa6:	f000 f8ff 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000faa:	2360      	movs	r3, #96	@ 0x60
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8000fae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4818      	ldr	r0, [pc, #96]	@ (8001034 <MX_TIM1_Init+0x154>)
 8000fd2:	f003 f97f 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000fdc:	f000 f8e4 	bl	80011a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_TIM1_Init+0x154>)
 8001016:	f003 ffed 	bl	8004ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001020:	f000 f8c2 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_TIM1_Init+0x154>)
 8001026:	f000 fa41 	bl	80014ac <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3768      	adds	r7, #104	@ 0x68
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000810 	.word	0x20000810
 8001038:	40012c00 	.word	0x40012c00

0800103c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <MX_USB_PCD_Init+0x3c>)
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <MX_USB_PCD_Init+0x40>)
 8001044:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_USB_PCD_Init+0x3c>)
 8001048:	2208      	movs	r2, #8
 800104a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_USB_PCD_Init+0x3c>)
 800104e:	2202      	movs	r2, #2
 8001050:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_USB_PCD_Init+0x3c>)
 8001054:	2202      	movs	r2, #2
 8001056:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_USB_PCD_Init+0x3c>)
 800105a:	2200      	movs	r2, #0
 800105c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_USB_PCD_Init+0x3c>)
 8001060:	2200      	movs	r2, #0
 8001062:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_USB_PCD_Init+0x3c>)
 8001066:	f000 ff73 	bl	8001f50 <HAL_PCD_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001070:	f000 f89a 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000085c 	.word	0x2000085c
 800107c:	40005c00 	.word	0x40005c00

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	4b42      	ldr	r3, [pc, #264]	@ (80011a0 <MX_GPIO_Init+0x120>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a41      	ldr	r2, [pc, #260]	@ (80011a0 <MX_GPIO_Init+0x120>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b3f      	ldr	r3, [pc, #252]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b3c      	ldr	r3, [pc, #240]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a3b      	ldr	r2, [pc, #236]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c6:	4b36      	ldr	r3, [pc, #216]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a35      	ldr	r2, [pc, #212]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b30      	ldr	r3, [pc, #192]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a2f      	ldr	r2, [pc, #188]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a29      	ldr	r2, [pc, #164]	@ (80011a0 <MX_GPIO_Init+0x120>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <MX_GPIO_Init+0x120>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800110e:	2200      	movs	r2, #0
 8001110:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001114:	4823      	ldr	r0, [pc, #140]	@ (80011a4 <MX_GPIO_Init+0x124>)
 8001116:	f000 fdd1 	bl	8001cbc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001122:	f000 fdcb 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001126:	2337      	movs	r3, #55	@ 0x37
 8001128:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800112a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	481a      	ldr	r0, [pc, #104]	@ (80011a4 <MX_GPIO_Init+0x124>)
 800113c:	f000 fc44 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001140:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001144:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <MX_GPIO_Init+0x124>)
 800115a:	f000 fc35 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001174:	f000 fc28 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001178:	2310      	movs	r3, #16
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001192:	f000 fc19 	bl	80019c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48001000 	.word	0x48001000

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <Error_Handler+0x8>

080011b4 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80011c6:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <SerialInitialise+0xe4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a33      	ldr	r2, [pc, #204]	@ (8001298 <SerialInitialise+0xe4>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80011d2:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <SerialInitialise+0xe4>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a30      	ldr	r2, [pc, #192]	@ (8001298 <SerialInitialise+0xe4>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d106      	bne.n	80011f4 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <SerialInitialise+0xe4>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001298 <SerialInitialise+0xe4>)
 80011ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011f0:	6153      	str	r3, [r2, #20]
		break;
 80011f2:	e000      	b.n	80011f6 <SerialInitialise+0x42>
	default:
		break;
 80011f4:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80011fe:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001208:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	69d9      	ldr	r1, [r3, #28]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d821      	bhi.n	800127a <SerialInitialise+0xc6>
 8001236:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <SerialInitialise+0x88>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	08001251 	.word	0x08001251
 8001240:	08001259 	.word	0x08001259
 8001244:	08001261 	.word	0x08001261
 8001248:	08001269 	.word	0x08001269
 800124c:	08001271 	.word	0x08001271
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2246      	movs	r2, #70	@ 0x46
 8001254:	801a      	strh	r2, [r3, #0]
		break;
 8001256:	e010      	b.n	800127a <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2246      	movs	r2, #70	@ 0x46
 800125c:	801a      	strh	r2, [r3, #0]
		break;
 800125e:	e00c      	b.n	800127a <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2246      	movs	r2, #70	@ 0x46
 8001264:	801a      	strh	r2, [r3, #0]
		break;
 8001266:	e008      	b.n	800127a <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2246      	movs	r2, #70	@ 0x46
 800126c:	801a      	strh	r2, [r3, #0]
		break;
 800126e:	e004      	b.n	800127a <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001276:	801a      	strh	r2, [r3, #0]
		break;
 8001278:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f042 020d 	orr.w	r2, r2, #13
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 80012a8:	bf00      	nop
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f8      	beq.n	80012aa <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	b292      	uxth	r2, r2
 80012c0:	801a      	strh	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80012dc:	e00b      	b.n	80012f6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffd9 	bl	800129c <SerialOutputChar>
		counter++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
		pt++;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3301      	adds	r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1ef      	bne.n	80012de <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	4798      	blx	r3
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_MspInit+0x44>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <HAL_MspInit+0x44>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_MspInit+0x44>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <HAL_MspInit+0x44>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a08      	ldr	r2, [pc, #32]	@ (800135c <HAL_MspInit+0x44>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_MspInit+0x44>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800134e:	2007      	movs	r0, #7
 8001350:	f000 fb06 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a17      	ldr	r2, [pc, #92]	@ (80013dc <HAL_I2C_MspInit+0x7c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d127      	bne.n	80013d2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_I2C_MspInit+0x80>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <HAL_I2C_MspInit+0x80>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_I2C_MspInit+0x80>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800139a:	23c0      	movs	r3, #192	@ 0xc0
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <HAL_I2C_MspInit+0x84>)
 80013b6:	f000 fb07 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <HAL_I2C_MspInit+0x80>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a08      	ldr	r2, [pc, #32]	@ (80013e0 <HAL_I2C_MspInit+0x80>)
 80013c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_I2C_MspInit+0x80>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000400 	.word	0x48000400

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <HAL_SPI_MspInit+0x7c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d128      	bne.n	800145c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a16      	ldr	r2, [pc, #88]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142c:	6153      	str	r3, [r2, #20]
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 800143a:	23a0      	movs	r3, #160	@ 0xa0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144a:	2305      	movs	r3, #5
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f000 fab6 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40013000 	.word	0x40013000
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_TIM_Base_MspInit+0x38>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10b      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001484:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40012c00 	.word	0x40012c00
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <HAL_TIM_MspPostInit+0x68>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d11d      	bne.n	800150a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_TIM_MspPostInit+0x6c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <HAL_TIM_MspPostInit+0x6c>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <HAL_TIM_MspPostInit+0x6c>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014f8:	2306      	movs	r3, #6
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001506:	f000 fa5f 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40012c00 	.word	0x40012c00
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a18      	ldr	r2, [pc, #96]	@ (800159c <HAL_PCD_MspInit+0x80>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d129      	bne.n	8001592 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_PCD_MspInit+0x84>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_PCD_MspInit+0x84>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001548:	6153      	str	r3, [r2, #20]
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_PCD_MspInit+0x84>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001556:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001568:	230e      	movs	r3, #14
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001576:	f000 fa27 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_PCD_MspInit+0x84>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_PCD_MspInit+0x84>)
 8001580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_PCD_MspInit+0x84>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40005c00 	.word	0x40005c00
 80015a0:	40021000 	.word	0x40021000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f8bb 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f003 fe64 	bl	8005300 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000a000 	.word	0x2000a000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000b3c 	.word	0x20000b3c
 800166c:	20000c90 	.word	0x20000c90

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001698:	f7ff ffea 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	@ (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	@ (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f003 fe23 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016c6:	f7ff fa93 	bl	8000bf0 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	200006f8 	.word	0x200006f8
  ldr r2, =_sidata
 80016d8:	080055b4 	.word	0x080055b4
  ldr r2, =_sbss
 80016dc:	200006f8 	.word	0x200006f8
  ldr r4, =_ebss
 80016e0:	20000c8c 	.word	0x20000c8c

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <HAL_Init+0x28>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <HAL_Init+0x28>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f931 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fe08 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000

08001714 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f93b 	bl	80019ae <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001750:	f000 f911 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000069c 	.word	0x2000069c
 800176c:	200006a4 	.word	0x200006a4
 8001770:	200006a0 	.word	0x200006a0

08001774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200006a4 	.word	0x200006a4
 8001798:	20000b40 	.word	0x20000b40

0800179c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;  
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000b40 	.word	0x20000b40

080017b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200006a4 	.word	0x200006a4

080017fc <__NVIC_SetPriorityGrouping>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_SetPriority>:
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	@ (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	@ 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	@ (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff47 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff5c 	bl	8001844 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffb0 	bl	800191c <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	e154      	b.n	8001c82 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8146 	beq.w	8001c7c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d005      	beq.n	8001a08 <HAL_GPIO_Init+0x40>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d130      	bne.n	8001a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3e:	2201      	movs	r2, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f003 0201 	and.w	r2, r3, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d017      	beq.n	8001aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d123      	bne.n	8001afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	6939      	ldr	r1, [r7, #16]
 8001af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0203 	and.w	r2, r3, #3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80a0 	beq.w	8001c7c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3c:	4b58      	ldr	r3, [pc, #352]	@ (8001ca0 <HAL_GPIO_Init+0x2d8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a57      	ldr	r2, [pc, #348]	@ (8001ca0 <HAL_GPIO_Init+0x2d8>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b55      	ldr	r3, [pc, #340]	@ (8001ca0 <HAL_GPIO_Init+0x2d8>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b54:	4a53      	ldr	r2, [pc, #332]	@ (8001ca4 <HAL_GPIO_Init+0x2dc>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b7e:	d019      	beq.n	8001bb4 <HAL_GPIO_Init+0x1ec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a49      	ldr	r2, [pc, #292]	@ (8001ca8 <HAL_GPIO_Init+0x2e0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d013      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a48      	ldr	r2, [pc, #288]	@ (8001cac <HAL_GPIO_Init+0x2e4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00d      	beq.n	8001bac <HAL_GPIO_Init+0x1e4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a47      	ldr	r2, [pc, #284]	@ (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d007      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a46      	ldr	r2, [pc, #280]	@ (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_GPIO_Init+0x1dc>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e008      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	e006      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e004      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	f002 0203 	and.w	r2, r2, #3
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4093      	lsls	r3, r2
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc6:	4937      	ldr	r1, [pc, #220]	@ (8001ca4 <HAL_GPIO_Init+0x2dc>)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd4:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bf8:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c22:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f47f aea3 	bne.w	80019d8 <HAL_GPIO_Init+0x10>
  }
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	48000c00 	.word	0x48000c00
 8001cb4:	48001000 	.word	0x48001000
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd8:	e002      	b.n	8001ce0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e08d      	b.n	8001e1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fb24 	bl	8001360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	@ 0x24
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	e006      	b.n	8001d74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d108      	bne.n	8001d8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	e007      	b.n	8001d9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69d9      	ldr	r1, [r3, #28]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d138      	bne.n	8001eaa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e032      	b.n	8001eac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2224      	movs	r2, #36	@ 0x24
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d139      	bne.n	8001f42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e033      	b.n	8001f44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	@ 0x24
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
  }
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0b9      	b.n	80020d6 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fad0 	bl	800151c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 f8b1 	bl	80050f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e03e      	b.n	8002012 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3311      	adds	r3, #17
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	3313      	adds	r3, #19
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3324      	adds	r3, #36	@ 0x24
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	3301      	adds	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	791b      	ldrb	r3, [r3, #4]
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3bb      	bcc.n	8001f94 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e044      	b.n	80020ac <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3301      	adds	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3b5      	bcc.n	8002022 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020c2:	f003 f830 	bl	8005126 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	f001 b823 	b.w	800314c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 817d 	beq.w	8002416 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800211c:	4bbc      	ldr	r3, [pc, #752]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d00c      	beq.n	8002142 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002128:	4bb9      	ldr	r3, [pc, #740]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d15c      	bne.n	80021ee <HAL_RCC_OscConfig+0x10e>
 8002134:	4bb6      	ldr	r3, [pc, #728]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002140:	d155      	bne.n	80021ee <HAL_RCC_OscConfig+0x10e>
 8002142:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002146:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002156:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d102      	bne.n	8002174 <HAL_RCC_OscConfig+0x94>
 800216e:	4ba8      	ldr	r3, [pc, #672]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	e015      	b.n	80021a0 <HAL_RCC_OscConfig+0xc0>
 8002174:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002178:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002188:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800218c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002190:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800219c:	4b9c      	ldr	r3, [pc, #624]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021a4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80021a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80021ac:	fa92 f2a2 	rbit	r2, r2
 80021b0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80021b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f002 021f 	and.w	r2, r2, #31
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 811f 	beq.w	8002414 <HAL_RCC_OscConfig+0x334>
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8116 	bne.w	8002414 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f000 bfaf 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x12e>
 8002200:	4b83      	ldr	r3, [pc, #524]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a82      	ldr	r2, [pc, #520]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e036      	b.n	800227c <HAL_RCC_OscConfig+0x19c>
 800220e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x158>
 800221e:	4b7c      	ldr	r3, [pc, #496]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7b      	ldr	r2, [pc, #492]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b79      	ldr	r3, [pc, #484]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a78      	ldr	r2, [pc, #480]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e021      	b.n	800227c <HAL_RCC_OscConfig+0x19c>
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x184>
 800224a:	4b71      	ldr	r3, [pc, #452]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a70      	ldr	r2, [pc, #448]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b6e      	ldr	r3, [pc, #440]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6d      	ldr	r2, [pc, #436]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x19c>
 8002264:	4b6a      	ldr	r3, [pc, #424]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a69      	ldr	r2, [pc, #420]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b67      	ldr	r3, [pc, #412]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a66      	ldr	r2, [pc, #408]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800227c:	4b64      	ldr	r3, [pc, #400]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	f023 020f 	bic.w	r2, r3, #15
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	495f      	ldr	r1, [pc, #380]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002292:	4313      	orrs	r3, r2
 8002294:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d059      	beq.n	800235a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff fa79 	bl	800179c <HAL_GetTick>
 80022aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fa74 	bl	800179c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	@ 0x64
 80022be:	d902      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	f000 bf43 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
 80022c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ca:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80022da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <HAL_RCC_OscConfig+0x218>
 80022f2:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	e015      	b.n	8002324 <HAL_RCC_OscConfig+0x244>
 80022f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022fc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800230c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002310:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002314:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002320:	4b3b      	ldr	r3, [pc, #236]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002328:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800232c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002330:	fa92 f2a2 	rbit	r2, r2
 8002334:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002338:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800233c:	fab2 f282 	clz	r2, r2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f002 021f 	and.w	r2, r2, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f202 	lsl.w	r2, r1, r2
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ab      	beq.n	80022b0 <HAL_RCC_OscConfig+0x1d0>
 8002358:	e05d      	b.n	8002416 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff fa1f 	bl	800179c <HAL_GetTick>
 800235e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	e00a      	b.n	800237a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fa1a 	bl	800179c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	@ 0x64
 8002372:	d902      	bls.n	800237a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	f000 bee9 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
 800237a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800237e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800238e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0x2cc>
 80023a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	e015      	b.n	80023d8 <HAL_RCC_OscConfig+0x2f8>
 80023ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80023c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023c4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80023c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023dc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80023e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80023e4:	fa92 f2a2 	rbit	r2, r2
 80023e8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80023ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80023f0:	fab2 f282 	clz	r2, r2
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f042 0220 	orr.w	r2, r2, #32
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f002 021f 	and.w	r2, r2, #31
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ab      	bne.n	8002364 <HAL_RCC_OscConfig+0x284>
 800240c:	e003      	b.n	8002416 <HAL_RCC_OscConfig+0x336>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 817d 	beq.w	8002726 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800242c:	4ba6      	ldr	r3, [pc, #664]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002438:	4ba3      	ldr	r3, [pc, #652]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d172      	bne.n	800252a <HAL_RCC_OscConfig+0x44a>
 8002444:	4ba0      	ldr	r3, [pc, #640]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d16c      	bne.n	800252a <HAL_RCC_OscConfig+0x44a>
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002462:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0x3a0>
 800247a:	4b93      	ldr	r3, [pc, #588]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	e013      	b.n	80024a8 <HAL_RCC_OscConfig+0x3c8>
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002498:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80024a4:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	2202      	movs	r2, #2
 80024aa:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80024ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80024b2:	fa92 f2a2 	rbit	r2, r2
 80024b6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80024ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f042 0220 	orr.w	r2, r2, #32
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 021f 	and.w	r2, r2, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCC_OscConfig+0x410>
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f000 be2e 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b75      	ldr	r3, [pc, #468]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	21f8      	movs	r1, #248	@ 0xf8
 8002506:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800250e:	fa91 f1a1 	rbit	r1, r1
 8002512:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002516:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800251a:	fab1 f181 	clz	r1, r1
 800251e:	b2c9      	uxtb	r1, r1
 8002520:	408b      	lsls	r3, r1
 8002522:	4969      	ldr	r1, [pc, #420]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002528:	e0fd      	b.n	8002726 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8088 	beq.w	800264c <HAL_RCC_OscConfig+0x56c>
 800253c:	2301      	movs	r3, #1
 800253e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800254e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800255c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	461a      	mov	r2, r3
 8002564:	2301      	movs	r3, #1
 8002566:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff f918 	bl	800179c <HAL_GetTick>
 800256c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002572:	f7ff f913 	bl	800179c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d902      	bls.n	8002588 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	f000 bde2 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
 8002588:	2302      	movs	r3, #2
 800258a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800259a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4d8>
 80025b2:	4b45      	ldr	r3, [pc, #276]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	e013      	b.n	80025e0 <HAL_RCC_OscConfig+0x500>
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80025ca:	2302      	movs	r3, #2
 80025cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80025d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80025dc:	4b3a      	ldr	r3, [pc, #232]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	2202      	movs	r2, #2
 80025e2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80025e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80025ea:	fa92 f2a2 	rbit	r2, r2
 80025ee:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80025f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	f042 0220 	orr.w	r2, r2, #32
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f002 021f 	and.w	r2, r2, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0af      	beq.n	8002572 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b2d      	ldr	r3, [pc, #180]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	21f8      	movs	r1, #248	@ 0xf8
 8002628:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002630:	fa91 f1a1 	rbit	r1, r1
 8002634:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002638:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800263c:	fab1 f181 	clz	r1, r1
 8002640:	b2c9      	uxtb	r1, r1
 8002642:	408b      	lsls	r3, r1
 8002644:	4920      	ldr	r1, [pc, #128]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
 800264a:	e06c      	b.n	8002726 <HAL_RCC_OscConfig+0x646>
 800264c:	2301      	movs	r3, #1
 800264e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800265e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800266c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	461a      	mov	r2, r3
 8002674:	2300      	movs	r3, #0
 8002676:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff f890 	bl	800179c <HAL_GetTick>
 800267c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002682:	f7ff f88b 	bl	800179c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d902      	bls.n	8002698 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	f000 bd5a 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80026aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d104      	bne.n	80026cc <HAL_RCC_OscConfig+0x5ec>
 80026c2:	4b01      	ldr	r3, [pc, #4]	@ (80026c8 <HAL_RCC_OscConfig+0x5e8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	e015      	b.n	80026f4 <HAL_RCC_OscConfig+0x614>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	2302      	movs	r3, #2
 80026ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80026de:	2302      	movs	r3, #2
 80026e0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80026e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80026f0:	4bc8      	ldr	r3, [pc, #800]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	2202      	movs	r2, #2
 80026f6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80026fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002706:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ad      	bne.n	8002682 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8110 	beq.w	800295c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002740:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d079      	beq.n	8002840 <HAL_RCC_OscConfig+0x760>
 800274c:	2301      	movs	r3, #1
 800274e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800275e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	4bab      	ldr	r3, [pc, #684]	@ (8002a18 <HAL_RCC_OscConfig+0x938>)
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	461a      	mov	r2, r3
 8002772:	2301      	movs	r3, #1
 8002774:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7ff f811 	bl	800179c <HAL_GetTick>
 800277a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002780:	f7ff f80c 	bl	800179c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d902      	bls.n	8002796 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	f000 bcdb 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027d4:	2202      	movs	r2, #2
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 80027f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80027fc:	2102      	movs	r1, #2
 80027fe:	6019      	str	r1, [r3, #0]
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f1a3 	rbit	r1, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002816:	6019      	str	r1, [r3, #0]
  return result;
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0a0      	beq.n	8002780 <HAL_RCC_OscConfig+0x6a0>
 800283e:	e08d      	b.n	800295c <HAL_RCC_OscConfig+0x87c>
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002862:	601a      	str	r2, [r3, #0]
  return result;
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800286c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <HAL_RCC_OscConfig+0x938>)
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	461a      	mov	r2, r3
 800287e:	2300      	movs	r3, #0
 8002880:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe ff8b 	bl	800179c <HAL_GetTick>
 8002886:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe ff86 	bl	800179c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d902      	bls.n	80028a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	f000 bc55 	b.w	800314c <HAL_RCC_OscConfig+0x106c>
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028aa:	2202      	movs	r2, #2
 80028ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028ce:	2202      	movs	r2, #2
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80028f2:	2202      	movs	r2, #2
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800290c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290e:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 8002910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800291a:	2102      	movs	r1, #2
 800291c:	6019      	str	r1, [r3, #0]
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f1a3 	rbit	r1, r3
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002934:	6019      	str	r1, [r3, #0]
  return result;
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d197      	bne.n	800288c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 81a1 	beq.w	8002cb4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 800298a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800298e:	61d3      	str	r3, [r2, #28]
 8002990:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <HAL_RCC_OscConfig+0x93c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11a      	bne.n	80029f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029be:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <HAL_RCC_OscConfig+0x93c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <HAL_RCC_OscConfig+0x93c>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fee7 	bl	800179c <HAL_GetTick>
 80029ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	e009      	b.n	80029e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe fee2 	bl	800179c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	@ 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e3b1      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a1c <HAL_RCC_OscConfig+0x93c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ef      	beq.n	80029d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10d      	bne.n	8002a20 <HAL_RCC_OscConfig+0x940>
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a02      	ldr	r2, [pc, #8]	@ (8002a14 <HAL_RCC_OscConfig+0x934>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6213      	str	r3, [r2, #32]
 8002a10:	e03c      	b.n	8002a8c <HAL_RCC_OscConfig+0x9ac>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	10908120 	.word	0x10908120
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x96a>
 8002a30:	4bc1      	ldr	r3, [pc, #772]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4ac0      	ldr	r2, [pc, #768]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	4bbe      	ldr	r3, [pc, #760]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4abd      	ldr	r2, [pc, #756]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a42:	f023 0304 	bic.w	r3, r3, #4
 8002a46:	6213      	str	r3, [r2, #32]
 8002a48:	e020      	b.n	8002a8c <HAL_RCC_OscConfig+0x9ac>
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x994>
 8002a5a:	4bb7      	ldr	r3, [pc, #732]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4ab6      	ldr	r2, [pc, #728]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	4bb4      	ldr	r3, [pc, #720]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4ab3      	ldr	r2, [pc, #716]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x9ac>
 8002a74:	4bb0      	ldr	r3, [pc, #704]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4aaf      	ldr	r2, [pc, #700]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6213      	str	r3, [r2, #32]
 8002a80:	4bad      	ldr	r3, [pc, #692]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4aac      	ldr	r2, [pc, #688]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8081 	beq.w	8002ba0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fe7d 	bl	800179c <HAL_GetTick>
 8002aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fe78 	bl	800179c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e345      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ac8:	2202      	movs	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002aec:	2202      	movs	r2, #2
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b06:	601a      	str	r2, [r3, #0]
  return result;
 8002b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_OscConfig+0xa4c>
 8002b26:	4b84      	ldr	r3, [pc, #528]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	e013      	b.n	8002b54 <HAL_RCC_OscConfig+0xa74>
 8002b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	4b79      	ldr	r3, [pc, #484]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	6011      	str	r1, [r2, #0]
 8002b60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b64:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	fa92 f1a2 	rbit	r1, r2
 8002b6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b72:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b76:	6011      	str	r1, [r2, #0]
  return result;
 8002b78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b7c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	fab2 f282 	clz	r2, r2
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f002 021f 	and.w	r2, r2, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d084      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x9c8>
 8002b9e:	e07f      	b.n	8002ca0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fdfc 	bl	800179c <HAL_GetTick>
 8002ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fdf7 	bl	800179c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e2c4      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002bca:	2202      	movs	r2, #2
 8002bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002bee:	2202      	movs	r2, #2
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	fa93 f2a3 	rbit	r2, r3
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c08:	601a      	str	r2, [r3, #0]
  return result;
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_OscConfig+0xb4e>
 8002c28:	4b43      	ldr	r3, [pc, #268]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	e013      	b.n	8002c56 <HAL_RCC_OscConfig+0xb76>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c36:	2202      	movs	r2, #2
 8002c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	fa93 f2a3 	rbit	r2, r3
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	4b39      	ldr	r3, [pc, #228]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c5a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c5e:	2102      	movs	r1, #2
 8002c60:	6011      	str	r1, [r2, #0]
 8002c62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c66:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	fa92 f1a2 	rbit	r1, r2
 8002c70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c74:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c78:	6011      	str	r1, [r2, #0]
  return result;
 8002c7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c7e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f002 021f 	and.w	r2, r2, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d184      	bne.n	8002baa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8242 	beq.w	800314a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <HAL_RCC_OscConfig+0xc58>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	f000 8213 	beq.w	80030fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	f040 8162 	bne.w	8002faa <HAL_RCC_OscConfig+0xeca>
 8002ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cea:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002cee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d0a:	601a      	str	r2, [r3, #0]
  return result;
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fd36 	bl	800179c <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e00c      	b.n	8002d50 <HAL_RCC_OscConfig+0xc70>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fd2e 	bl	800179c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1fd      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d74:	601a      	str	r2, [r3, #0]
  return result;
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_OscConfig+0xcba>
 8002d94:	4bb0      	ldr	r3, [pc, #704]	@ (8003058 <HAL_RCC_OscConfig+0xf78>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	e027      	b.n	8002dea <HAL_RCC_OscConfig+0xd0a>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002da2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002dc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	4b9c      	ldr	r3, [pc, #624]	@ (8003058 <HAL_RCC_OscConfig+0xf78>)
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dee:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002df2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002df6:	6011      	str	r1, [r2, #0]
 8002df8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dfc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	fa92 f1a2 	rbit	r1, r2
 8002e06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e0e:	6011      	str	r1, [r2, #0]
  return result;
 8002e10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e14:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	fab2 f282 	clz	r2, r2
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f042 0220 	orr.w	r2, r2, #32
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f002 021f 	and.w	r2, r2, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d182      	bne.n	8002d3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e36:	4b88      	ldr	r3, [pc, #544]	@ (8003058 <HAL_RCC_OscConfig+0xf78>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	430b      	orrs	r3, r1
 8002e58:	497f      	ldr	r1, [pc, #508]	@ (8003058 <HAL_RCC_OscConfig+0xf78>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e82:	601a      	str	r2, [r3, #0]
  return result;
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fc7a 	bl	800179c <HAL_GetTick>
 8002ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	e009      	b.n	8002ec2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe fc75 	bl	800179c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e144      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
 8002ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002eca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fa93 f2a3 	rbit	r2, r3
 8002ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002ee6:	601a      	str	r2, [r3, #0]
  return result;
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002ef0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe2c>
 8002f06:	4b54      	ldr	r3, [pc, #336]	@ (8003058 <HAL_RCC_OscConfig+0xf78>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	e027      	b.n	8002f5c <HAL_RCC_OscConfig+0xe7c>
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f36:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	4b3f      	ldr	r3, [pc, #252]	@ (8003058 <HAL_RCC_OscConfig+0xf78>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f60:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f64:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f68:	6011      	str	r1, [r2, #0]
 8002f6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f6e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	fa92 f1a2 	rbit	r1, r2
 8002f78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f80:	6011      	str	r1, [r2, #0]
  return result;
 8002f82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f86:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	fab2 f282 	clz	r2, r2
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f042 0220 	orr.w	r2, r2, #32
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	f002 021f 	and.w	r2, r2, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d082      	beq.n	8002eae <HAL_RCC_OscConfig+0xdce>
 8002fa8:	e0cf      	b.n	800314a <HAL_RCC_OscConfig+0x106a>
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002fb2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002fce:	601a      	str	r2, [r3, #0]
  return result;
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002fd8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fe4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	461a      	mov	r2, r3
 8002fec:	2300      	movs	r3, #0
 8002fee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fbd4 	bl	800179c <HAL_GetTick>
 8002ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	e009      	b.n	800300e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fe fbcf 	bl	800179c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e09e      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003016:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800301a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003020:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003032:	601a      	str	r2, [r3, #0]
  return result;
 8003034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003038:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800303c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d104      	bne.n	800305c <HAL_RCC_OscConfig+0xf7c>
 8003052:	4b01      	ldr	r3, [pc, #4]	@ (8003058 <HAL_RCC_OscConfig+0xf78>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e029      	b.n	80030ac <HAL_RCC_OscConfig+0xfcc>
 8003058:	40021000 	.word	0x40021000
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003064:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	fa93 f2a3 	rbit	r2, r3
 8003078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800308a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_RCC_OscConfig+0x1078>)
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80030b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030be:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	fa92 f1a2 	rbit	r1, r2
 80030c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030cc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030d0:	6011      	str	r1, [r2, #0]
  return result;
 80030d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030d6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	fab2 f282 	clz	r2, r2
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	f042 0220 	orr.w	r2, r2, #32
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f002 021f 	and.w	r2, r2, #31
 80030ec:	2101      	movs	r1, #1
 80030ee:	fa01 f202 	lsl.w	r2, r1, r2
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d180      	bne.n	8002ffa <HAL_RCC_OscConfig+0xf1a>
 80030f8:	e027      	b.n	800314a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01e      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800310e:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_RCC_OscConfig+0x1078>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003116:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800311a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	429a      	cmp	r2, r3
 800312c:	d10b      	bne.n	8003146 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800312e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003132:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000

0800315c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b09e      	sub	sp, #120	@ 0x78
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e162      	b.n	800343a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b90      	ldr	r3, [pc, #576]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d910      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b8d      	ldr	r3, [pc, #564]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 0207 	bic.w	r2, r3, #7
 800318a:	498b      	ldr	r1, [pc, #556]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b89      	ldr	r3, [pc, #548]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e14a      	b.n	800343a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b82      	ldr	r3, [pc, #520]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	497f      	ldr	r1, [pc, #508]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80dc 	beq.w	8003388 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d13c      	bne.n	8003252 <HAL_RCC_ClockConfig+0xf6>
 80031d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80031e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_ClockConfig+0xa6>
 80031fc:	4b6f      	ldr	r3, [pc, #444]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	e00f      	b.n	8003222 <HAL_RCC_ClockConfig+0xc6>
 8003202:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003206:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003214:	663b      	str	r3, [r7, #96]	@ 0x60
 8003216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800321e:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003226:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003228:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800322a:	fa92 f2a2 	rbit	r2, r2
 800322e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003230:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003232:	fab2 f282 	clz	r2, r2
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f042 0220 	orr.w	r2, r2, #32
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f002 021f 	and.w	r2, r2, #31
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d17b      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0f3      	b.n	800343a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d13c      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x178>
 800325a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800325e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d102      	bne.n	8003284 <HAL_RCC_ClockConfig+0x128>
 800327e:	4b4f      	ldr	r3, [pc, #316]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e00f      	b.n	80032a4 <HAL_RCC_ClockConfig+0x148>
 8003284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003288:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
 8003292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003296:	643b      	str	r3, [r7, #64]	@ 0x40
 8003298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032a0:	4b46      	ldr	r3, [pc, #280]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80032aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032ac:	fa92 f2a2 	rbit	r2, r2
 80032b0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80032b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d13a      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b2      	b.n	800343a <HAL_RCC_ClockConfig+0x2de>
 80032d4:	2302      	movs	r3, #2
 80032d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HAL_RCC_ClockConfig+0x1a0>
 80032f6:	4b31      	ldr	r3, [pc, #196]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e00d      	b.n	8003318 <HAL_RCC_ClockConfig+0x1bc>
 80032fc:	2302      	movs	r3, #2
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	4b29      	ldr	r3, [pc, #164]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	2202      	movs	r2, #2
 800331a:	61ba      	str	r2, [r7, #24]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	fa92 f2a2 	rbit	r2, r2
 8003322:	617a      	str	r2, [r7, #20]
  return result;
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f002 021f 	and.w	r2, r2, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e079      	b.n	800343a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	491a      	ldr	r1, [pc, #104]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fa20 	bl	800179c <HAL_GetTick>
 800335c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fe fa1c 	bl	800179c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e061      	b.n	800343a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b11      	ldr	r3, [pc, #68]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d214      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	4906      	ldr	r1, [pc, #24]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <HAL_RCC_ClockConfig+0x25c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e040      	b.n	800343a <HAL_RCC_ClockConfig+0x2de>
 80033b8:	40022000 	.word	0x40022000
 80033bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003444 <HAL_RCC_ClockConfig+0x2e8>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	491a      	ldr	r1, [pc, #104]	@ (8003444 <HAL_RCC_ClockConfig+0x2e8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ea:	4b16      	ldr	r3, [pc, #88]	@ (8003444 <HAL_RCC_ClockConfig+0x2e8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4912      	ldr	r1, [pc, #72]	@ (8003444 <HAL_RCC_ClockConfig+0x2e8>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033fe:	f000 f829 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8003402:	4601      	mov	r1, r0
 8003404:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <HAL_RCC_ClockConfig+0x2e8>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800340c:	22f0      	movs	r2, #240	@ 0xf0
 800340e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	fa92 f2a2 	rbit	r2, r2
 8003416:	60fa      	str	r2, [r7, #12]
  return result;
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	40d3      	lsrs	r3, r2
 8003422:	4a09      	ldr	r2, [pc, #36]	@ (8003448 <HAL_RCC_ClockConfig+0x2ec>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	fa21 f303 	lsr.w	r3, r1, r3
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_RCC_ClockConfig+0x2f0>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <HAL_RCC_ClockConfig+0x2f4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f96e 	bl	8001714 <HAL_InitTick>
  
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3778      	adds	r7, #120	@ 0x78
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	0800557c 	.word	0x0800557c
 800344c:	2000069c 	.word	0x2000069c
 8003450:	200006a0 	.word	0x200006a0

08003454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800346e:	4b1e      	ldr	r3, [pc, #120]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d002      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x30>
 800347e:	2b08      	cmp	r3, #8
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x36>
 8003482:	e026      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003484:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003486:	613b      	str	r3, [r7, #16]
      break;
 8003488:	e026      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	0c9b      	lsrs	r3, r3, #18
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a17      	ldr	r2, [pc, #92]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003498:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034b0:	4a0e      	ldr	r2, [pc, #56]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x98>)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e004      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	e002      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034d2:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x98>)
 80034d4:	613b      	str	r3, [r7, #16]
      break;
 80034d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d8:	693b      	ldr	r3, [r7, #16]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	007a1200 	.word	0x007a1200
 80034f0:	0800558c 	.word	0x0800558c
 80034f4:	0800559c 	.word	0x0800559c
 80034f8:	003d0900 	.word	0x003d0900

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b092      	sub	sp, #72	@ 0x48
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80d4 	beq.w	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003520:	4b4e      	ldr	r3, [pc, #312]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10e      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352c:	4b4b      	ldr	r3, [pc, #300]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4a4a      	ldr	r2, [pc, #296]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003536:	61d3      	str	r3, [r2, #28]
 8003538:	4b48      	ldr	r3, [pc, #288]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b45      	ldr	r3, [pc, #276]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b42      	ldr	r3, [pc, #264]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a41      	ldr	r2, [pc, #260]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe f91b 	bl	800179c <HAL_GetTick>
 8003566:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe f917 	bl	800179c <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	@ 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e169      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b38      	ldr	r3, [pc, #224]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003588:	4b34      	ldr	r3, [pc, #208]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003590:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8084 	beq.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d07c      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a8:	4b2c      	ldr	r3, [pc, #176]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b26      	ldr	r3, [pc, #152]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	461a      	mov	r2, r3
 80035d2:	2301      	movs	r3, #1
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	461a      	mov	r2, r3
 80035f6:	2300      	movs	r3, #0
 80035f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035fa:	4a18      	ldr	r2, [pc, #96]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04b      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe f8c7 	bl	800179c <HAL_GetTick>
 800360e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fe f8c3 	bl	800179c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e113      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003628:	2302      	movs	r3, #2
 800362a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
 8003634:	2302      	movs	r3, #2
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	61fb      	str	r3, [r7, #28]
  return result;
 8003640:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d108      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003656:	4b01      	ldr	r3, [pc, #4]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	e00d      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	10908100 	.word	0x10908100
 8003668:	2302      	movs	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	4b78      	ldr	r3, [pc, #480]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	2202      	movs	r2, #2
 800367a:	613a      	str	r2, [r7, #16]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	fa92 f2a2 	rbit	r2, r2
 8003682:	60fa      	str	r2, [r7, #12]
  return result;
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	fab2 f282 	clz	r2, r2
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f002 021f 	and.w	r2, r2, #31
 8003696:	2101      	movs	r1, #1
 8003698:	fa01 f202 	lsl.w	r2, r1, r2
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0b7      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	496a      	ldr	r1, [pc, #424]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d105      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036bc:	4b66      	ldr	r3, [pc, #408]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4a65      	ldr	r2, [pc, #404]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d4:	4b60      	ldr	r3, [pc, #384]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	f023 0203 	bic.w	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	495d      	ldr	r1, [pc, #372]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f2:	4b59      	ldr	r3, [pc, #356]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4956      	ldr	r1, [pc, #344]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003710:	4b51      	ldr	r3, [pc, #324]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	494e      	ldr	r1, [pc, #312]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372e:	4b4a      	ldr	r3, [pc, #296]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	f023 0210 	bic.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4947      	ldr	r1, [pc, #284]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800374c:	4b42      	ldr	r3, [pc, #264]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	493f      	ldr	r1, [pc, #252]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800376a:	4b3b      	ldr	r3, [pc, #236]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f023 0220 	bic.w	r2, r3, #32
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4938      	ldr	r1, [pc, #224]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003778:	4313      	orrs	r3, r2
 800377a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003788:	4b33      	ldr	r3, [pc, #204]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4930      	ldr	r1, [pc, #192]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	4929      	ldr	r1, [pc, #164]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037c4:	4b24      	ldr	r3, [pc, #144]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4921      	ldr	r1, [pc, #132]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	491a      	ldr	r1, [pc, #104]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003800:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	4912      	ldr	r1, [pc, #72]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380e:	4313      	orrs	r3, r2
 8003810:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800381e:	4b0e      	ldr	r3, [pc, #56]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	490b      	ldr	r1, [pc, #44]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800383c:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003848:	4903      	ldr	r1, [pc, #12]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3748      	adds	r7, #72	@ 0x48
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000

0800385c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e09d      	b.n	80039aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800387e:	d009      	beq.n	8003894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
 8003886:	e005      	b.n	8003894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fd fd9a 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038d4:	d902      	bls.n	80038dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	e002      	b.n	80038e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80038ea:	d007      	beq.n	80038fc <HAL_SPI_Init+0xa0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	ea42 0103 	orr.w	r1, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003946:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 0204 	and.w	r2, r3, #4
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003978:	ea42 0103 	orr.w	r1, r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_SPI_Transmit+0x22>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e15f      	b.n	8003c94 <HAL_SPI_Transmit+0x2e2>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039dc:	f7fd fede 	bl	800179c <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d002      	beq.n	80039f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039f6:	e148      	b.n	8003c8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Transmit+0x52>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a08:	e13f      	b.n	8003c8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a54:	d10f      	bne.n	8003a76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	d007      	beq.n	8003a94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a9c:	d94f      	bls.n	8003b3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0xfa>
 8003aa6:	8afb      	ldrh	r3, [r7, #22]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d142      	bne.n	8003b32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ad0:	e02f      	b.n	8003b32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d112      	bne.n	8003b06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b04:	e015      	b.n	8003b32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b06:	f7fd fe49 	bl	800179c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d803      	bhi.n	8003b1e <HAL_SPI_Transmit+0x16c>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Transmit+0x172>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003b30:	e0ab      	b.n	8003c8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ca      	bne.n	8003ad2 <HAL_SPI_Transmit+0x120>
 8003b3c:	e080      	b.n	8003c40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_Transmit+0x19a>
 8003b46:	8afb      	ldrh	r3, [r7, #22]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d174      	bne.n	8003c36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d912      	bls.n	8003b7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	881a      	ldrh	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b66:	1c9a      	adds	r2, r3, #2
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b02      	subs	r3, #2
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b7a:	e05c      	b.n	8003c36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ba2:	e048      	b.n	8003c36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d12b      	bne.n	8003c0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d912      	bls.n	8003be2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b02      	subs	r3, #2
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003be0:	e029      	b.n	8003c36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	7812      	ldrb	r2, [r2, #0]
 8003bee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c08:	e015      	b.n	8003c36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0a:	f7fd fdc7 	bl	800179c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d803      	bhi.n	8003c22 <HAL_SPI_Transmit+0x270>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_Transmit+0x276>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003c34:	e029      	b.n	8003c8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1b1      	bne.n	8003ba4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f947 	bl	8003ed8 <SPI_EndRxTxTransaction>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e003      	b.n	8003c8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cac:	f7fd fd76 	bl	800179c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cbc:	f7fd fd6e 	bl	800179c <HAL_GetTick>
 8003cc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cc2:	4b39      	ldr	r3, [pc, #228]	@ (8003da8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	015b      	lsls	r3, r3, #5
 8003cc8:	0d1b      	lsrs	r3, r3, #20
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	fb02 f303 	mul.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd2:	e054      	b.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cda:	d050      	beq.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cdc:	f7fd fd5e 	bl	800179c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d902      	bls.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d13d      	bne.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d0a:	d111      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d14:	d004      	beq.n	8003d20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1e:	d107      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d38:	d10f      	bne.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e017      	b.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d19b      	bne.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2000069c 	.word	0x2000069c

08003dac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	@ 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dbe:	f7fd fced 	bl	800179c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003dce:	f7fd fce5 	bl	800179c <HAL_GetTick>
 8003dd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00da      	lsls	r2, r3, #3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	0d1b      	lsrs	r3, r3, #20
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003df4:	e060      	b.n	8003eb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dfc:	d107      	bne.n	8003e0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e14:	d050      	beq.n	8003eb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e16:	f7fd fcc1 	bl	800179c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d902      	bls.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d13d      	bne.n	8003ea8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e44:	d111      	bne.n	8003e6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e4e:	d004      	beq.n	8003e5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e58:	d107      	bne.n	8003e6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e72:	d10f      	bne.n	8003e94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e010      	b.n	8003eca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d196      	bne.n	8003df6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3728      	adds	r7, #40	@ 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000069c 	.word	0x2000069c

08003ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff ff5b 	bl	8003dac <SPI_WaitFifoStateUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e027      	b.n	8003f5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2180      	movs	r1, #128	@ 0x80
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fec0 	bl	8003c9c <SPI_WaitFlagStateUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e014      	b.n	8003f5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff ff34 	bl	8003dac <SPI_WaitFifoStateUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e000      	b.n	8003f5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e049      	b.n	800400a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fa6e 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 fb74 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e049      	b.n	80040b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f841 	bl	80040c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 fb1d 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x24>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e03c      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d109      	bne.n	8004112 <HAL_TIM_PWM_Start+0x3e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e02f      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x58>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e022      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d109      	bne.n	8004146 <HAL_TIM_PWM_Start+0x72>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e015      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b10      	cmp	r3, #16
 800414a:	d109      	bne.n	8004160 <HAL_TIM_PWM_Start+0x8c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e008      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e097      	b.n	80042aa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Start+0xb6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004188:	e023      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Start+0xc6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004198:	e01b      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d104      	bne.n	80041aa <HAL_TIM_PWM_Start+0xd6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a8:	e013      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d104      	bne.n	80041ba <HAL_TIM_PWM_Start+0xe6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b8:	e00b      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d104      	bne.n	80041ca <HAL_TIM_PWM_Start+0xf6>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041c8:	e003      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2201      	movs	r2, #1
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fe64 	bl	8004ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a33      	ldr	r2, [pc, #204]	@ (80042b4 <HAL_TIM_PWM_Start+0x1e0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_TIM_PWM_Start+0x13e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a32      	ldr	r2, [pc, #200]	@ (80042b8 <HAL_TIM_PWM_Start+0x1e4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_TIM_PWM_Start+0x13e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a30      	ldr	r2, [pc, #192]	@ (80042bc <HAL_TIM_PWM_Start+0x1e8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_TIM_PWM_Start+0x13e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2f      	ldr	r2, [pc, #188]	@ (80042c0 <HAL_TIM_PWM_Start+0x1ec>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_TIM_PWM_Start+0x13e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	@ (80042c4 <HAL_TIM_PWM_Start+0x1f0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_TIM_PWM_Start+0x142>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_TIM_PWM_Start+0x144>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800422a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a20      	ldr	r2, [pc, #128]	@ (80042b4 <HAL_TIM_PWM_Start+0x1e0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_PWM_Start+0x194>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423e:	d013      	beq.n	8004268 <HAL_TIM_PWM_Start+0x194>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a20      	ldr	r2, [pc, #128]	@ (80042c8 <HAL_TIM_PWM_Start+0x1f4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_PWM_Start+0x194>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <HAL_TIM_PWM_Start+0x1f8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_PWM_Start+0x194>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a17      	ldr	r2, [pc, #92]	@ (80042b8 <HAL_TIM_PWM_Start+0x1e4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_PWM_Start+0x194>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	@ (80042bc <HAL_TIM_PWM_Start+0x1e8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d115      	bne.n	8004294 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	4b18      	ldr	r3, [pc, #96]	@ (80042d0 <HAL_TIM_PWM_Start+0x1fc>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d015      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x1d2>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004280:	d011      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	e008      	b.n	80042a6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e000      	b.n	80042a8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40013400 	.word	0x40013400
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	00010007 	.word	0x00010007

080042d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0ff      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b14      	cmp	r3, #20
 80042fe:	f200 80f0 	bhi.w	80044e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004302:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	0800435d 	.word	0x0800435d
 800430c:	080044e3 	.word	0x080044e3
 8004310:	080044e3 	.word	0x080044e3
 8004314:	080044e3 	.word	0x080044e3
 8004318:	0800439d 	.word	0x0800439d
 800431c:	080044e3 	.word	0x080044e3
 8004320:	080044e3 	.word	0x080044e3
 8004324:	080044e3 	.word	0x080044e3
 8004328:	080043df 	.word	0x080043df
 800432c:	080044e3 	.word	0x080044e3
 8004330:	080044e3 	.word	0x080044e3
 8004334:	080044e3 	.word	0x080044e3
 8004338:	0800441f 	.word	0x0800441f
 800433c:	080044e3 	.word	0x080044e3
 8004340:	080044e3 	.word	0x080044e3
 8004344:	080044e3 	.word	0x080044e3
 8004348:	08004461 	.word	0x08004461
 800434c:	080044e3 	.word	0x080044e3
 8004350:	080044e3 	.word	0x080044e3
 8004354:	080044e3 	.word	0x080044e3
 8004358:	080044a1 	.word	0x080044a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa30 	bl	80047c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6999      	ldr	r1, [r3, #24]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	619a      	str	r2, [r3, #24]
      break;
 800439a:	e0a5      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 faa0 	bl	80048e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	021a      	lsls	r2, r3, #8
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	619a      	str	r2, [r3, #24]
      break;
 80043dc:	e084      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fb09 	bl	80049fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0208 	orr.w	r2, r2, #8
 80043f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0204 	bic.w	r2, r2, #4
 8004408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69d9      	ldr	r1, [r3, #28]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	61da      	str	r2, [r3, #28]
      break;
 800441c:	e064      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fb71 	bl	8004b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	021a      	lsls	r2, r3, #8
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	61da      	str	r2, [r3, #28]
      break;
 800445e:	e043      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fbba 	bl	8004be0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800449e:	e023      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fbfe 	bl	8004ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	021a      	lsls	r2, r3, #8
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044e0:	e002      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
      break;
 80044e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e0b6      	b.n	8004686 <HAL_TIM_ConfigClockSource+0x18a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004554:	d03e      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0xd8>
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455a:	f200 8087 	bhi.w	800466c <HAL_TIM_ConfigClockSource+0x170>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	f000 8086 	beq.w	8004672 <HAL_TIM_ConfigClockSource+0x176>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456a:	d87f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800456c:	2b70      	cmp	r3, #112	@ 0x70
 800456e:	d01a      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xaa>
 8004570:	2b70      	cmp	r3, #112	@ 0x70
 8004572:	d87b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004574:	2b60      	cmp	r3, #96	@ 0x60
 8004576:	d050      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x11e>
 8004578:	2b60      	cmp	r3, #96	@ 0x60
 800457a:	d877      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d03c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xfe>
 8004580:	2b50      	cmp	r3, #80	@ 0x50
 8004582:	d873      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d058      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x13e>
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	d86f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d064      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 8004590:	2b30      	cmp	r3, #48	@ 0x30
 8004592:	d86b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d060      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d867      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d05a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 80045a4:	e062      	b.n	800466c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b6:	f000 fc57 	bl	8004e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	609a      	str	r2, [r3, #8]
      break;
 80045d2:	e04f      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e4:	f000 fc40 	bl	8004e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e03c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fbb4 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	@ 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fc0d 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004618:	e02c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fbd3 	bl	8004dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2160      	movs	r1, #96	@ 0x60
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fbfd 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004638:	e01c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fb94 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2140      	movs	r1, #64	@ 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fbed 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004658:	e00c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 fbe4 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 800466a:	e003      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e000      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a42      	ldr	r2, [pc, #264]	@ (80047ac <TIM_Base_SetConfig+0x11c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00f      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3f      	ldr	r2, [pc, #252]	@ (80047b0 <TIM_Base_SetConfig+0x120>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3e      	ldr	r2, [pc, #248]	@ (80047b4 <TIM_Base_SetConfig+0x124>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3d      	ldr	r2, [pc, #244]	@ (80047b8 <TIM_Base_SetConfig+0x128>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a33      	ldr	r2, [pc, #204]	@ (80047ac <TIM_Base_SetConfig+0x11c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01b      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e8:	d017      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a30      	ldr	r2, [pc, #192]	@ (80047b0 <TIM_Base_SetConfig+0x120>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2f      	ldr	r2, [pc, #188]	@ (80047b4 <TIM_Base_SetConfig+0x124>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2e      	ldr	r2, [pc, #184]	@ (80047b8 <TIM_Base_SetConfig+0x128>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2d      	ldr	r2, [pc, #180]	@ (80047bc <TIM_Base_SetConfig+0x12c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <TIM_Base_SetConfig+0x130>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2b      	ldr	r2, [pc, #172]	@ (80047c4 <TIM_Base_SetConfig+0x134>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <TIM_Base_SetConfig+0x11c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_Base_SetConfig+0xe8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a17      	ldr	r2, [pc, #92]	@ (80047b8 <TIM_Base_SetConfig+0x128>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0xe8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <TIM_Base_SetConfig+0x12c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0xe8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a15      	ldr	r2, [pc, #84]	@ (80047c0 <TIM_Base_SetConfig+0x130>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0xe8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a14      	ldr	r2, [pc, #80]	@ (80047c4 <TIM_Base_SetConfig+0x134>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	611a      	str	r2, [r3, #16]
  }
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40013400 	.word	0x40013400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800

080047c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f023 0201 	bic.w	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 0302 	bic.w	r3, r3, #2
 8004814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a2c      	ldr	r2, [pc, #176]	@ (80048d4 <TIM_OC1_SetConfig+0x10c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_OC1_SetConfig+0x80>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a2b      	ldr	r2, [pc, #172]	@ (80048d8 <TIM_OC1_SetConfig+0x110>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_OC1_SetConfig+0x80>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a2a      	ldr	r2, [pc, #168]	@ (80048dc <TIM_OC1_SetConfig+0x114>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_OC1_SetConfig+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a29      	ldr	r2, [pc, #164]	@ (80048e0 <TIM_OC1_SetConfig+0x118>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC1_SetConfig+0x80>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a28      	ldr	r2, [pc, #160]	@ (80048e4 <TIM_OC1_SetConfig+0x11c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10c      	bne.n	8004862 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0308 	bic.w	r3, r3, #8
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1b      	ldr	r2, [pc, #108]	@ (80048d4 <TIM_OC1_SetConfig+0x10c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00f      	beq.n	800488a <TIM_OC1_SetConfig+0xc2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a1a      	ldr	r2, [pc, #104]	@ (80048d8 <TIM_OC1_SetConfig+0x110>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00b      	beq.n	800488a <TIM_OC1_SetConfig+0xc2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a19      	ldr	r2, [pc, #100]	@ (80048dc <TIM_OC1_SetConfig+0x114>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_OC1_SetConfig+0xc2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <TIM_OC1_SetConfig+0x118>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_OC1_SetConfig+0xc2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a17      	ldr	r2, [pc, #92]	@ (80048e4 <TIM_OC1_SetConfig+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d111      	bne.n	80048ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40013400 	.word	0x40013400
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800

080048e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f023 0210 	bic.w	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a28      	ldr	r2, [pc, #160]	@ (80049e8 <TIM_OC2_SetConfig+0x100>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC2_SetConfig+0x6c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a27      	ldr	r2, [pc, #156]	@ (80049ec <TIM_OC2_SetConfig+0x104>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10d      	bne.n	8004970 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800495a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800496e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <TIM_OC2_SetConfig+0x100>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00f      	beq.n	8004998 <TIM_OC2_SetConfig+0xb0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <TIM_OC2_SetConfig+0x104>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00b      	beq.n	8004998 <TIM_OC2_SetConfig+0xb0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <TIM_OC2_SetConfig+0x108>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_OC2_SetConfig+0xb0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1a      	ldr	r2, [pc, #104]	@ (80049f4 <TIM_OC2_SetConfig+0x10c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC2_SetConfig+0xb0>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <TIM_OC2_SetConfig+0x110>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d113      	bne.n	80049c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800499e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40013400 	.word	0x40013400
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800

080049fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <TIM_OC3_SetConfig+0xfc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_OC3_SetConfig+0x6a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <TIM_OC3_SetConfig+0x100>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <TIM_OC3_SetConfig+0xfc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00f      	beq.n	8004aaa <TIM_OC3_SetConfig+0xae>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <TIM_OC3_SetConfig+0x100>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00b      	beq.n	8004aaa <TIM_OC3_SetConfig+0xae>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <TIM_OC3_SetConfig+0x104>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d007      	beq.n	8004aaa <TIM_OC3_SetConfig+0xae>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <TIM_OC3_SetConfig+0x108>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d003      	beq.n	8004aaa <TIM_OC3_SetConfig+0xae>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <TIM_OC3_SetConfig+0x10c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d113      	bne.n	8004ad2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	621a      	str	r2, [r3, #32]
}
 8004aec:	bf00      	nop
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800

08004b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	031b      	lsls	r3, r3, #12
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	@ (8004bcc <TIM_OC4_SetConfig+0xc0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00f      	beq.n	8004b90 <TIM_OC4_SetConfig+0x84>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <TIM_OC4_SetConfig+0xc4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_OC4_SetConfig+0x84>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	@ (8004bd4 <TIM_OC4_SetConfig+0xc8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_OC4_SetConfig+0x84>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a15      	ldr	r2, [pc, #84]	@ (8004bd8 <TIM_OC4_SetConfig+0xcc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_OC4_SetConfig+0x84>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <TIM_OC4_SetConfig+0xd0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d109      	bne.n	8004ba4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800

08004be0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a17      	ldr	r2, [pc, #92]	@ (8004c94 <TIM_OC5_SetConfig+0xb4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <TIM_OC5_SetConfig+0xb8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a15      	ldr	r2, [pc, #84]	@ (8004c9c <TIM_OC5_SetConfig+0xbc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <TIM_OC5_SetConfig+0xc0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a13      	ldr	r2, [pc, #76]	@ (8004ca4 <TIM_OC5_SetConfig+0xc4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d109      	bne.n	8004c6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	051b      	lsls	r3, r3, #20
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <TIM_OC6_SetConfig+0xb8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00f      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a17      	ldr	r2, [pc, #92]	@ (8004d64 <TIM_OC6_SetConfig+0xbc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	@ (8004d68 <TIM_OC6_SetConfig+0xc0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <TIM_OC6_SetConfig+0xc4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a14      	ldr	r2, [pc, #80]	@ (8004d70 <TIM_OC6_SetConfig+0xc8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d109      	bne.n	8004d38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0201 	bic.w	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 030a 	bic.w	r3, r3, #10
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	031b      	lsls	r3, r3, #12
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f043 0307 	orr.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2201      	movs	r2, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e063      	b.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7e:	d013      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a17      	ldr	r2, [pc, #92]	@ (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a12      	ldr	r2, [pc, #72]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a13      	ldr	r2, [pc, #76]	@ (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40014000 	.word	0x40014000

08004ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800500c:	2302      	movs	r3, #2
 800500e:	e065      	b.n	80050dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a14      	ldr	r2, [pc, #80]	@ (80050ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d115      	bne.n	80050ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	051b      	lsls	r3, r3, #20
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400

080050f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050f8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80050fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	b29b      	uxth	r3, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	b29b      	uxth	r3, r3
 800510e:	4013      	ands	r3, r2
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <malloc>:
 8005164:	4b02      	ldr	r3, [pc, #8]	@ (8005170 <malloc+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f000 b825 	b.w	80051b8 <_malloc_r>
 800516e:	bf00      	nop
 8005170:	200006a8 	.word	0x200006a8

08005174 <sbrk_aligned>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4e0f      	ldr	r6, [pc, #60]	@ (80051b4 <sbrk_aligned+0x40>)
 8005178:	460c      	mov	r4, r1
 800517a:	6831      	ldr	r1, [r6, #0]
 800517c:	4605      	mov	r5, r0
 800517e:	b911      	cbnz	r1, 8005186 <sbrk_aligned+0x12>
 8005180:	f000 f8ae 	bl	80052e0 <_sbrk_r>
 8005184:	6030      	str	r0, [r6, #0]
 8005186:	4621      	mov	r1, r4
 8005188:	4628      	mov	r0, r5
 800518a:	f000 f8a9 	bl	80052e0 <_sbrk_r>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	d103      	bne.n	800519a <sbrk_aligned+0x26>
 8005192:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005196:	4620      	mov	r0, r4
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	1cc4      	adds	r4, r0, #3
 800519c:	f024 0403 	bic.w	r4, r4, #3
 80051a0:	42a0      	cmp	r0, r4
 80051a2:	d0f8      	beq.n	8005196 <sbrk_aligned+0x22>
 80051a4:	1a21      	subs	r1, r4, r0
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 f89a 	bl	80052e0 <_sbrk_r>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d1f2      	bne.n	8005196 <sbrk_aligned+0x22>
 80051b0:	e7ef      	b.n	8005192 <sbrk_aligned+0x1e>
 80051b2:	bf00      	nop
 80051b4:	20000b44 	.word	0x20000b44

080051b8 <_malloc_r>:
 80051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	1ccd      	adds	r5, r1, #3
 80051be:	f025 0503 	bic.w	r5, r5, #3
 80051c2:	3508      	adds	r5, #8
 80051c4:	2d0c      	cmp	r5, #12
 80051c6:	bf38      	it	cc
 80051c8:	250c      	movcc	r5, #12
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	4606      	mov	r6, r0
 80051ce:	db01      	blt.n	80051d4 <_malloc_r+0x1c>
 80051d0:	42a9      	cmp	r1, r5
 80051d2:	d904      	bls.n	80051de <_malloc_r+0x26>
 80051d4:	230c      	movs	r3, #12
 80051d6:	6033      	str	r3, [r6, #0]
 80051d8:	2000      	movs	r0, #0
 80051da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052b4 <_malloc_r+0xfc>
 80051e2:	f000 f869 	bl	80052b8 <__malloc_lock>
 80051e6:	f8d8 3000 	ldr.w	r3, [r8]
 80051ea:	461c      	mov	r4, r3
 80051ec:	bb44      	cbnz	r4, 8005240 <_malloc_r+0x88>
 80051ee:	4629      	mov	r1, r5
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff ffbf 	bl	8005174 <sbrk_aligned>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	4604      	mov	r4, r0
 80051fa:	d158      	bne.n	80052ae <_malloc_r+0xf6>
 80051fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005200:	4627      	mov	r7, r4
 8005202:	2f00      	cmp	r7, #0
 8005204:	d143      	bne.n	800528e <_malloc_r+0xd6>
 8005206:	2c00      	cmp	r4, #0
 8005208:	d04b      	beq.n	80052a2 <_malloc_r+0xea>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	4639      	mov	r1, r7
 800520e:	4630      	mov	r0, r6
 8005210:	eb04 0903 	add.w	r9, r4, r3
 8005214:	f000 f864 	bl	80052e0 <_sbrk_r>
 8005218:	4581      	cmp	r9, r0
 800521a:	d142      	bne.n	80052a2 <_malloc_r+0xea>
 800521c:	6821      	ldr	r1, [r4, #0]
 800521e:	1a6d      	subs	r5, r5, r1
 8005220:	4629      	mov	r1, r5
 8005222:	4630      	mov	r0, r6
 8005224:	f7ff ffa6 	bl	8005174 <sbrk_aligned>
 8005228:	3001      	adds	r0, #1
 800522a:	d03a      	beq.n	80052a2 <_malloc_r+0xea>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	442b      	add	r3, r5
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	f8d8 3000 	ldr.w	r3, [r8]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	bb62      	cbnz	r2, 8005294 <_malloc_r+0xdc>
 800523a:	f8c8 7000 	str.w	r7, [r8]
 800523e:	e00f      	b.n	8005260 <_malloc_r+0xa8>
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	1b52      	subs	r2, r2, r5
 8005244:	d420      	bmi.n	8005288 <_malloc_r+0xd0>
 8005246:	2a0b      	cmp	r2, #11
 8005248:	d917      	bls.n	800527a <_malloc_r+0xc2>
 800524a:	1961      	adds	r1, r4, r5
 800524c:	42a3      	cmp	r3, r4
 800524e:	6025      	str	r5, [r4, #0]
 8005250:	bf18      	it	ne
 8005252:	6059      	strne	r1, [r3, #4]
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	bf08      	it	eq
 8005258:	f8c8 1000 	streq.w	r1, [r8]
 800525c:	5162      	str	r2, [r4, r5]
 800525e:	604b      	str	r3, [r1, #4]
 8005260:	4630      	mov	r0, r6
 8005262:	f000 f82f 	bl	80052c4 <__malloc_unlock>
 8005266:	f104 000b 	add.w	r0, r4, #11
 800526a:	1d23      	adds	r3, r4, #4
 800526c:	f020 0007 	bic.w	r0, r0, #7
 8005270:	1ac2      	subs	r2, r0, r3
 8005272:	bf1c      	itt	ne
 8005274:	1a1b      	subne	r3, r3, r0
 8005276:	50a3      	strne	r3, [r4, r2]
 8005278:	e7af      	b.n	80051da <_malloc_r+0x22>
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	42a3      	cmp	r3, r4
 800527e:	bf0c      	ite	eq
 8005280:	f8c8 2000 	streq.w	r2, [r8]
 8005284:	605a      	strne	r2, [r3, #4]
 8005286:	e7eb      	b.n	8005260 <_malloc_r+0xa8>
 8005288:	4623      	mov	r3, r4
 800528a:	6864      	ldr	r4, [r4, #4]
 800528c:	e7ae      	b.n	80051ec <_malloc_r+0x34>
 800528e:	463c      	mov	r4, r7
 8005290:	687f      	ldr	r7, [r7, #4]
 8005292:	e7b6      	b.n	8005202 <_malloc_r+0x4a>
 8005294:	461a      	mov	r2, r3
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	42a3      	cmp	r3, r4
 800529a:	d1fb      	bne.n	8005294 <_malloc_r+0xdc>
 800529c:	2300      	movs	r3, #0
 800529e:	6053      	str	r3, [r2, #4]
 80052a0:	e7de      	b.n	8005260 <_malloc_r+0xa8>
 80052a2:	230c      	movs	r3, #12
 80052a4:	6033      	str	r3, [r6, #0]
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 f80c 	bl	80052c4 <__malloc_unlock>
 80052ac:	e794      	b.n	80051d8 <_malloc_r+0x20>
 80052ae:	6005      	str	r5, [r0, #0]
 80052b0:	e7d6      	b.n	8005260 <_malloc_r+0xa8>
 80052b2:	bf00      	nop
 80052b4:	20000b48 	.word	0x20000b48

080052b8 <__malloc_lock>:
 80052b8:	4801      	ldr	r0, [pc, #4]	@ (80052c0 <__malloc_lock+0x8>)
 80052ba:	f000 b84b 	b.w	8005354 <__retarget_lock_acquire_recursive>
 80052be:	bf00      	nop
 80052c0:	20000c84 	.word	0x20000c84

080052c4 <__malloc_unlock>:
 80052c4:	4801      	ldr	r0, [pc, #4]	@ (80052cc <__malloc_unlock+0x8>)
 80052c6:	f000 b846 	b.w	8005356 <__retarget_lock_release_recursive>
 80052ca:	bf00      	nop
 80052cc:	20000c84 	.word	0x20000c84

080052d0 <memset>:
 80052d0:	4402      	add	r2, r0
 80052d2:	4603      	mov	r3, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d100      	bne.n	80052da <memset+0xa>
 80052d8:	4770      	bx	lr
 80052da:	f803 1b01 	strb.w	r1, [r3], #1
 80052de:	e7f9      	b.n	80052d4 <memset+0x4>

080052e0 <_sbrk_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d06      	ldr	r5, [pc, #24]	@ (80052fc <_sbrk_r+0x1c>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	f7fc f98a 	bl	8001604 <_sbrk>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_sbrk_r+0x1a>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_sbrk_r+0x1a>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20000c88 	.word	0x20000c88

08005300 <__errno>:
 8005300:	4b01      	ldr	r3, [pc, #4]	@ (8005308 <__errno+0x8>)
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	200006a8 	.word	0x200006a8

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4d0d      	ldr	r5, [pc, #52]	@ (8005344 <__libc_init_array+0x38>)
 8005310:	4c0d      	ldr	r4, [pc, #52]	@ (8005348 <__libc_init_array+0x3c>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	2600      	movs	r6, #0
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	4d0b      	ldr	r5, [pc, #44]	@ (800534c <__libc_init_array+0x40>)
 800531e:	4c0c      	ldr	r4, [pc, #48]	@ (8005350 <__libc_init_array+0x44>)
 8005320:	f000 f81a 	bl	8005358 <_init>
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	2600      	movs	r6, #0
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	080055ac 	.word	0x080055ac
 8005348:	080055ac 	.word	0x080055ac
 800534c:	080055ac 	.word	0x080055ac
 8005350:	080055b0 	.word	0x080055b0

08005354 <__retarget_lock_acquire_recursive>:
 8005354:	4770      	bx	lr

08005356 <__retarget_lock_release_recursive>:
 8005356:	4770      	bx	lr

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
